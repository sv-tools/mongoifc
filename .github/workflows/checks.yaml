name: "Code Analysis"

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: read

concurrency:
  group: ${{ format('{0}-{1}', github.workflow, github.head_ref) }}
  cancel-in-progress: true

env:
  GO: "1.23"
  MONGO_USERNAME: "admin"
  MONGO_PASSWORD: "adminpass"

jobs:
  CodeQL:
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@df409f7d9260372bd5f19e5b04e83cb3c43714ae # v3.27.9
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@df409f7d9260372bd5f19e5b04e83cb3c43714ae # v3.27.9

  UnitTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ env.GO }}

      - name: Build and Run MongoDB
        run: make run-docker
        env:
          SLEEP: 10

      - name: Run Unit Tests
        env:
          MONGO_URI: "mongodb://${{ env.MONGO_USERNAME }}:${{ env.MONGO_PASSWORD }}@127.0.0.1:27888/?authSource=admin&directConnection=true"
        run: go test -race -cover -coverprofile=coverage.out -covermode=atomic

      - name: Codecov
        uses: codecov/codecov-action@7f8b4b4bde536c465e797be725718b88c5d95e0e # v5.1.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  GolangCI-Lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ env.GO }}

      - name: Run GolangCi-Lint
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1
        with:
          version: latest

  Mocks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: ${{ env.GO }}

      - name: Generate Mocks
        run: make go-install generate-mocks

      - name: Checking Git
        run: |
          DELTA="$(git status --short)"
          if [ -n "${DELTA}" ]
          then
            echo "::error title=Mocks are outdated::Please run 'make generate-mocks' to re-generate the mocks"
            git status
            exit 1
          fi
