name: "Code Analysis"

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: read

concurrency:
  group: ${{ format('{0}-{1}', github.workflow, github.head_ref) }}
  cancel-in-progress: true

env:
  GO: "1.21"
  MONGO_USERNAME: "admin"
  MONGO_PASSWORD: "adminpass"

jobs:
  CodeQL:
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Initialize CodeQL
        uses: github/codeql-action/init@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6

  UnitTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO }}

      - name: Build and Run MongoDB
        run: make run-docker
        env:
          SLEEP: 10

      - name: Run Unit Tests
        env:
          MONGO_URI: "mongodb://${{ env.MONGO_USERNAME }}:${{ env.MONGO_PASSWORD }}@127.0.0.1:27888/?authSource=admin&directConnection=true"
        run: go test -race -cover -coverprofile=coverage.out -covermode=atomic

      - name: Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          file: ./coverage.out

  GolangCI-Lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO }}

      - name: Run GolangCi-Lint
        uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6.1.0
        with:
          version: latest
          skip-build-cache: true

  Mocks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO }}

      - name: Generate Mocks
        run: make go-install generate-mocks

      - name: Checking Git
        run: |
          DELTA="$(git status --short)"
          if [ -n "${DELTA}" ]
          then
            echo "::error title=Mocks are outdated::Please run 'make generate-mocks' to re-generate the mocks"
            exit 1
          fi
