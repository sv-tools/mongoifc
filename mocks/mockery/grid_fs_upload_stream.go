// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GridFSUploadStream is an autogenerated mock type for the GridFSUploadStream type
type GridFSUploadStream struct {
	mock.Mock
}

type GridFSUploadStream_Expecter struct {
	mock *mock.Mock
}

func (_m *GridFSUploadStream) EXPECT() *GridFSUploadStream_Expecter {
	return &GridFSUploadStream_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with no fields
func (_m *GridFSUploadStream) Abort() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSUploadStream_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type GridFSUploadStream_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
func (_e *GridFSUploadStream_Expecter) Abort() *GridFSUploadStream_Abort_Call {
	return &GridFSUploadStream_Abort_Call{Call: _e.mock.On("Abort")}
}

func (_c *GridFSUploadStream_Abort_Call) Run(run func()) *GridFSUploadStream_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSUploadStream_Abort_Call) Return(_a0 error) *GridFSUploadStream_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSUploadStream_Abort_Call) RunAndReturn(run func() error) *GridFSUploadStream_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *GridFSUploadStream) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSUploadStream_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type GridFSUploadStream_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *GridFSUploadStream_Expecter) Close() *GridFSUploadStream_Close_Call {
	return &GridFSUploadStream_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *GridFSUploadStream_Close_Call) Run(run func()) *GridFSUploadStream_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSUploadStream_Close_Call) Return(_a0 error) *GridFSUploadStream_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSUploadStream_Close_Call) RunAndReturn(run func() error) *GridFSUploadStream_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileID provides a mock function with no fields
func (_m *GridFSUploadStream) GetFileID() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFileID")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GridFSUploadStream_GetFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileID'
type GridFSUploadStream_GetFileID_Call struct {
	*mock.Call
}

// GetFileID is a helper method to define mock.On call
func (_e *GridFSUploadStream_Expecter) GetFileID() *GridFSUploadStream_GetFileID_Call {
	return &GridFSUploadStream_GetFileID_Call{Call: _e.mock.On("GetFileID")}
}

func (_c *GridFSUploadStream_GetFileID_Call) Run(run func()) *GridFSUploadStream_GetFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSUploadStream_GetFileID_Call) Return(_a0 interface{}) *GridFSUploadStream_GetFileID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSUploadStream_GetFileID_Call) RunAndReturn(run func() interface{}) *GridFSUploadStream_GetFileID_Call {
	_c.Call.Return(run)
	return _c
}

// SetFileID provides a mock function with given fields: fileID
func (_m *GridFSUploadStream) SetFileID(fileID interface{}) {
	_m.Called(fileID)
}

// GridFSUploadStream_SetFileID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFileID'
type GridFSUploadStream_SetFileID_Call struct {
	*mock.Call
}

// SetFileID is a helper method to define mock.On call
//   - fileID interface{}
func (_e *GridFSUploadStream_Expecter) SetFileID(fileID interface{}) *GridFSUploadStream_SetFileID_Call {
	return &GridFSUploadStream_SetFileID_Call{Call: _e.mock.On("SetFileID", fileID)}
}

func (_c *GridFSUploadStream_SetFileID_Call) Run(run func(fileID interface{})) *GridFSUploadStream_SetFileID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GridFSUploadStream_SetFileID_Call) Return() *GridFSUploadStream_SetFileID_Call {
	_c.Call.Return()
	return _c
}

func (_c *GridFSUploadStream_SetFileID_Call) RunAndReturn(run func(interface{})) *GridFSUploadStream_SetFileID_Call {
	_c.Run(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *GridFSUploadStream) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSUploadStream_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type GridFSUploadStream_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *GridFSUploadStream_Expecter) Write(p interface{}) *GridFSUploadStream_Write_Call {
	return &GridFSUploadStream_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *GridFSUploadStream_Write_Call) Run(run func(p []byte)) *GridFSUploadStream_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *GridFSUploadStream_Write_Call) Return(_a0 int, _a1 error) *GridFSUploadStream_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSUploadStream_Write_Call) RunAndReturn(run func([]byte) (int, error)) *GridFSUploadStream_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewGridFSUploadStream creates a new instance of GridFSUploadStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGridFSUploadStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *GridFSUploadStream {
	mock := &GridFSUploadStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
