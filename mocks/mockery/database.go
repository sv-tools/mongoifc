// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/v2/mongo"

	mongoifc "github.com/sv-tools/mongoifc/v2"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, pipeline, opts
func (_m *Database) Aggregate(ctx context.Context, pipeline interface{}, opts ...options.Lister[options.AggregateOptions]) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.AggregateOptions]) (mongoifc.Cursor, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.AggregateOptions]) mongoifc.Cursor); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.AggregateOptions]) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type Database_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...options.Lister[options.AggregateOptions]
func (_e *Database_Expecter) Aggregate(ctx interface{}, pipeline interface{}, opts ...interface{}) *Database_Aggregate_Call {
	return &Database_Aggregate_Call{Call: _e.mock.On("Aggregate",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *Database_Aggregate_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...options.Lister[options.AggregateOptions])) *Database_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.AggregateOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.AggregateOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_Aggregate_Call) Return(_a0 mongoifc.Cursor, _a1 error) *Database_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_Aggregate_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.AggregateOptions]) (mongoifc.Cursor, error)) *Database_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// Client provides a mock function with no fields
func (_m *Database) Client() mongoifc.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 mongoifc.Client
	if rf, ok := ret.Get(0).(func() mongoifc.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Client)
		}
	}

	return r0
}

// Database_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type Database_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *Database_Expecter) Client() *Database_Client_Call {
	return &Database_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *Database_Client_Call) Run(run func()) *Database_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Client_Call) Return(_a0 mongoifc.Client) *Database_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Client_Call) RunAndReturn(run func() mongoifc.Client) *Database_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function with given fields: name, opts
func (_m *Database) Collection(name string, opts ...options.Lister[options.CollectionOptions]) mongoifc.Collection {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 mongoifc.Collection
	if rf, ok := ret.Get(0).(func(string, ...options.Lister[options.CollectionOptions]) mongoifc.Collection); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Collection)
		}
	}

	return r0
}

// Database_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type Database_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - name string
//   - opts ...options.Lister[options.CollectionOptions]
func (_e *Database_Expecter) Collection(name interface{}, opts ...interface{}) *Database_Collection_Call {
	return &Database_Collection_Call{Call: _e.mock.On("Collection",
		append([]interface{}{name}, opts...)...)}
}

func (_c *Database_Collection_Call) Run(run func(name string, opts ...options.Lister[options.CollectionOptions])) *Database_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.CollectionOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CollectionOptions])
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Database_Collection_Call) Return(_a0 mongoifc.Collection) *Database_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Collection_Call) RunAndReturn(run func(string, ...options.Lister[options.CollectionOptions]) mongoifc.Collection) *Database_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: ctx, name, opts
func (_m *Database) CreateCollection(ctx context.Context, name string, opts ...options.Lister[options.CreateCollectionOptions]) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.Lister[options.CreateCollectionOptions]) error); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type Database_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts ...options.Lister[options.CreateCollectionOptions]
func (_e *Database_Expecter) CreateCollection(ctx interface{}, name interface{}, opts ...interface{}) *Database_CreateCollection_Call {
	return &Database_CreateCollection_Call{Call: _e.mock.On("CreateCollection",
		append([]interface{}{ctx, name}, opts...)...)}
}

func (_c *Database_CreateCollection_Call) Run(run func(ctx context.Context, name string, opts ...options.Lister[options.CreateCollectionOptions])) *Database_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.CreateCollectionOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CreateCollectionOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Database_CreateCollection_Call) Return(_a0 error) *Database_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateCollection_Call) RunAndReturn(run func(context.Context, string, ...options.Lister[options.CreateCollectionOptions]) error) *Database_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateView provides a mock function with given fields: ctx, viewName, viewOn, pipeline, opts
func (_m *Database) CreateView(ctx context.Context, viewName string, viewOn string, pipeline interface{}, opts ...options.Lister[options.CreateViewOptions]) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, viewName, viewOn, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateView")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...options.Lister[options.CreateViewOptions]) error); ok {
		r0 = rf(ctx, viewName, viewOn, pipeline, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_CreateView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateView'
type Database_CreateView_Call struct {
	*mock.Call
}

// CreateView is a helper method to define mock.On call
//   - ctx context.Context
//   - viewName string
//   - viewOn string
//   - pipeline interface{}
//   - opts ...options.Lister[options.CreateViewOptions]
func (_e *Database_Expecter) CreateView(ctx interface{}, viewName interface{}, viewOn interface{}, pipeline interface{}, opts ...interface{}) *Database_CreateView_Call {
	return &Database_CreateView_Call{Call: _e.mock.On("CreateView",
		append([]interface{}{ctx, viewName, viewOn, pipeline}, opts...)...)}
}

func (_c *Database_CreateView_Call) Run(run func(ctx context.Context, viewName string, viewOn string, pipeline interface{}, opts ...options.Lister[options.CreateViewOptions])) *Database_CreateView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.CreateViewOptions], len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CreateViewOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_CreateView_Call) Return(_a0 error) *Database_CreateView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_CreateView_Call) RunAndReturn(run func(context.Context, string, string, interface{}, ...options.Lister[options.CreateViewOptions]) error) *Database_CreateView_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *Database) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type Database_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Database_Expecter) Drop(ctx interface{}) *Database_Drop_Call {
	return &Database_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *Database_Drop_Call) Run(run func(ctx context.Context)) *Database_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Database_Drop_Call) Return(_a0 error) *Database_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Drop_Call) RunAndReturn(run func(context.Context) error) *Database_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// GridFSBucket provides a mock function with given fields: opts
func (_m *Database) GridFSBucket(opts ...options.Lister[options.BucketOptions]) mongoifc.GridFSBucket {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GridFSBucket")
	}

	var r0 mongoifc.GridFSBucket
	if rf, ok := ret.Get(0).(func(...options.Lister[options.BucketOptions]) mongoifc.GridFSBucket); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.GridFSBucket)
		}
	}

	return r0
}

// Database_GridFSBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GridFSBucket'
type Database_GridFSBucket_Call struct {
	*mock.Call
}

// GridFSBucket is a helper method to define mock.On call
//   - opts ...options.Lister[options.BucketOptions]
func (_e *Database_Expecter) GridFSBucket(opts ...interface{}) *Database_GridFSBucket_Call {
	return &Database_GridFSBucket_Call{Call: _e.mock.On("GridFSBucket",
		append([]interface{}{}, opts...)...)}
}

func (_c *Database_GridFSBucket_Call) Run(run func(opts ...options.Lister[options.BucketOptions])) *Database_GridFSBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.BucketOptions], len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.BucketOptions])
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Database_GridFSBucket_Call) Return(_a0 mongoifc.GridFSBucket) *Database_GridFSBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_GridFSBucket_Call) RunAndReturn(run func(...options.Lister[options.BucketOptions]) mongoifc.GridFSBucket) *Database_GridFSBucket_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollectionNames provides a mock function with given fields: ctx, filter, opts
func (_m *Database) ListCollectionNames(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions]) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollectionNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) ([]string, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) []string); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_ListCollectionNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollectionNames'
type Database_ListCollectionNames_Call struct {
	*mock.Call
}

// ListCollectionNames is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.ListCollectionsOptions]
func (_e *Database_Expecter) ListCollectionNames(ctx interface{}, filter interface{}, opts ...interface{}) *Database_ListCollectionNames_Call {
	return &Database_ListCollectionNames_Call{Call: _e.mock.On("ListCollectionNames",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Database_ListCollectionNames_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions])) *Database_ListCollectionNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ListCollectionsOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ListCollectionsOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_ListCollectionNames_Call) Return(_a0 []string, _a1 error) *Database_ListCollectionNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_ListCollectionNames_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) ([]string, error)) *Database_ListCollectionNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollectionSpecifications provides a mock function with given fields: ctx, filter, opts
func (_m *Database) ListCollectionSpecifications(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions]) ([]mongo.CollectionSpecification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollectionSpecifications")
	}

	var r0 []mongo.CollectionSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) ([]mongo.CollectionSpecification, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) []mongo.CollectionSpecification); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mongo.CollectionSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_ListCollectionSpecifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollectionSpecifications'
type Database_ListCollectionSpecifications_Call struct {
	*mock.Call
}

// ListCollectionSpecifications is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.ListCollectionsOptions]
func (_e *Database_Expecter) ListCollectionSpecifications(ctx interface{}, filter interface{}, opts ...interface{}) *Database_ListCollectionSpecifications_Call {
	return &Database_ListCollectionSpecifications_Call{Call: _e.mock.On("ListCollectionSpecifications",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Database_ListCollectionSpecifications_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions])) *Database_ListCollectionSpecifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ListCollectionsOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ListCollectionsOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_ListCollectionSpecifications_Call) Return(_a0 []mongo.CollectionSpecification, _a1 error) *Database_ListCollectionSpecifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_ListCollectionSpecifications_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) ([]mongo.CollectionSpecification, error)) *Database_ListCollectionSpecifications_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function with given fields: ctx, filter, opts
func (_m *Database) ListCollections(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions]) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) (mongoifc.Cursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) mongoifc.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type Database_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.ListCollectionsOptions]
func (_e *Database_Expecter) ListCollections(ctx interface{}, filter interface{}, opts ...interface{}) *Database_ListCollections_Call {
	return &Database_ListCollections_Call{Call: _e.mock.On("ListCollections",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Database_ListCollections_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.ListCollectionsOptions])) *Database_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ListCollectionsOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ListCollectionsOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_ListCollections_Call) Return(_a0 mongoifc.Cursor, _a1 error) *Database_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_ListCollections_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.ListCollectionsOptions]) (mongoifc.Cursor, error)) *Database_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Database) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Database_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Database_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Database_Expecter) Name() *Database_Name_Call {
	return &Database_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Database_Name_Call) Run(run func()) *Database_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Name_Call) Return(_a0 string) *Database_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Name_Call) RunAndReturn(run func() string) *Database_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommand provides a mock function with given fields: ctx, runCommand, opts
func (_m *Database) RunCommand(ctx context.Context, runCommand interface{}, opts ...options.Lister[options.RunCmdOptions]) mongoifc.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, runCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunCommand")
	}

	var r0 mongoifc.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.RunCmdOptions]) mongoifc.SingleResult); ok {
		r0 = rf(ctx, runCommand, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SingleResult)
		}
	}

	return r0
}

// Database_RunCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommand'
type Database_RunCommand_Call struct {
	*mock.Call
}

// RunCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - runCommand interface{}
//   - opts ...options.Lister[options.RunCmdOptions]
func (_e *Database_Expecter) RunCommand(ctx interface{}, runCommand interface{}, opts ...interface{}) *Database_RunCommand_Call {
	return &Database_RunCommand_Call{Call: _e.mock.On("RunCommand",
		append([]interface{}{ctx, runCommand}, opts...)...)}
}

func (_c *Database_RunCommand_Call) Run(run func(ctx context.Context, runCommand interface{}, opts ...options.Lister[options.RunCmdOptions])) *Database_RunCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.RunCmdOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.RunCmdOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_RunCommand_Call) Return(_a0 mongoifc.SingleResult) *Database_RunCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_RunCommand_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.RunCmdOptions]) mongoifc.SingleResult) *Database_RunCommand_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommandCursor provides a mock function with given fields: ctx, runCommand, opts
func (_m *Database) RunCommandCursor(ctx context.Context, runCommand interface{}, opts ...options.Lister[options.RunCmdOptions]) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, runCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunCommandCursor")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.RunCmdOptions]) (mongoifc.Cursor, error)); ok {
		return rf(ctx, runCommand, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.RunCmdOptions]) mongoifc.Cursor); ok {
		r0 = rf(ctx, runCommand, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.RunCmdOptions]) error); ok {
		r1 = rf(ctx, runCommand, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_RunCommandCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommandCursor'
type Database_RunCommandCursor_Call struct {
	*mock.Call
}

// RunCommandCursor is a helper method to define mock.On call
//   - ctx context.Context
//   - runCommand interface{}
//   - opts ...options.Lister[options.RunCmdOptions]
func (_e *Database_Expecter) RunCommandCursor(ctx interface{}, runCommand interface{}, opts ...interface{}) *Database_RunCommandCursor_Call {
	return &Database_RunCommandCursor_Call{Call: _e.mock.On("RunCommandCursor",
		append([]interface{}{ctx, runCommand}, opts...)...)}
}

func (_c *Database_RunCommandCursor_Call) Run(run func(ctx context.Context, runCommand interface{}, opts ...options.Lister[options.RunCmdOptions])) *Database_RunCommandCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.RunCmdOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.RunCmdOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_RunCommandCursor_Call) Return(_a0 mongoifc.Cursor, _a1 error) *Database_RunCommandCursor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_RunCommandCursor_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.RunCmdOptions]) (mongoifc.Cursor, error)) *Database_RunCommandCursor_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, pipeline, opts
func (_m *Database) Watch(ctx context.Context, pipeline interface{}, opts ...options.Lister[options.ChangeStreamOptions]) (mongoifc.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 mongoifc.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ChangeStreamOptions]) (mongoifc.ChangeStream, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.ChangeStreamOptions]) mongoifc.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.ChangeStreamOptions]) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type Database_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...options.Lister[options.ChangeStreamOptions]
func (_e *Database_Expecter) Watch(ctx interface{}, pipeline interface{}, opts ...interface{}) *Database_Watch_Call {
	return &Database_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *Database_Watch_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...options.Lister[options.ChangeStreamOptions])) *Database_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.ChangeStreamOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ChangeStreamOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Database_Watch_Call) Return(_a0 mongoifc.ChangeStream, _a1 error) *Database_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_Watch_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.ChangeStreamOptions]) (mongoifc.ChangeStream, error)) *Database_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
