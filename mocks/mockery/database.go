// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	mongoifc "github.com/sv-tools/mongoifc"

	options "go.mongodb.org/mongo-driver/mongo/options"

	readconcern "go.mongodb.org/mongo-driver/mongo/readconcern"

	readpref "go.mongodb.org/mongo-driver/mongo/readpref"

	writeconcern "go.mongodb.org/mongo-driver/mongo/writeconcern"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, pipeline, opts
func (_m *Database) Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongoifc.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) mongoifc.Cursor); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.AggregateOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client provides a mock function with given fields:
func (_m *Database) Client() mongoifc.Client {
	ret := _m.Called()

	var r0 mongoifc.Client
	if rf, ok := ret.Get(0).(func() mongoifc.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Client)
		}
	}

	return r0
}

// Collection provides a mock function with given fields: name, opts
func (_m *Database) Collection(name string, opts ...*options.CollectionOptions) mongoifc.Collection {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongoifc.Collection
	if rf, ok := ret.Get(0).(func(string, ...*options.CollectionOptions) mongoifc.Collection); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Collection)
		}
	}

	return r0
}

// CreateCollection provides a mock function with given fields: ctx, name, opts
func (_m *Database) CreateCollection(ctx context.Context, name string, opts ...*options.CreateCollectionOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.CreateCollectionOptions) error); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateView provides a mock function with given fields: ctx, viewName, viewOn, pipeline, opts
func (_m *Database) CreateView(ctx context.Context, viewName string, viewOn string, pipeline interface{}, opts ...*options.CreateViewOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, viewName, viewOn, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...*options.CreateViewOptions) error); ok {
		r0 = rf(ctx, viewName, viewOn, pipeline, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Drop provides a mock function with given fields: ctx
func (_m *Database) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCollectionNames provides a mock function with given fields: ctx, filter, opts
func (_m *Database) ListCollectionNames(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) []string); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollectionSpecifications provides a mock function with given fields: ctx, filter, opts
func (_m *Database) ListCollectionSpecifications(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions) ([]*mongo.CollectionSpecification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*mongo.CollectionSpecification
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) []*mongo.CollectionSpecification); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mongo.CollectionSpecification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollections provides a mock function with given fields: ctx, filter, opts
func (_m *Database) ListCollections(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongoifc.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) mongoifc.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Database) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadConcern provides a mock function with given fields:
func (_m *Database) ReadConcern() *readconcern.ReadConcern {
	ret := _m.Called()

	var r0 *readconcern.ReadConcern
	if rf, ok := ret.Get(0).(func() *readconcern.ReadConcern); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*readconcern.ReadConcern)
		}
	}

	return r0
}

// ReadPreference provides a mock function with given fields:
func (_m *Database) ReadPreference() *readpref.ReadPref {
	ret := _m.Called()

	var r0 *readpref.ReadPref
	if rf, ok := ret.Get(0).(func() *readpref.ReadPref); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*readpref.ReadPref)
		}
	}

	return r0
}

// RunCommand provides a mock function with given fields: ctx, runCommand, opts
func (_m *Database) RunCommand(ctx context.Context, runCommand interface{}, opts ...*options.RunCmdOptions) mongoifc.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, runCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongoifc.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.RunCmdOptions) mongoifc.SingleResult); ok {
		r0 = rf(ctx, runCommand, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SingleResult)
		}
	}

	return r0
}

// RunCommandCursor provides a mock function with given fields: ctx, runCommand, opts
func (_m *Database) RunCommandCursor(ctx context.Context, runCommand interface{}, opts ...*options.RunCmdOptions) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, runCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongoifc.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.RunCmdOptions) mongoifc.Cursor); ok {
		r0 = rf(ctx, runCommand, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.RunCmdOptions) error); ok {
		r1 = rf(ctx, runCommand, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, pipeline, opts
func (_m *Database) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (mongoifc.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongoifc.ChangeStream
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) mongoifc.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.ChangeStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteConcern provides a mock function with given fields:
func (_m *Database) WriteConcern() *writeconcern.WriteConcern {
	ret := _m.Called()

	var r0 *writeconcern.WriteConcern
	if rf, ok := ret.Get(0).(func() *writeconcern.WriteConcern); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*writeconcern.WriteConcern)
		}
	}

	return r0
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
