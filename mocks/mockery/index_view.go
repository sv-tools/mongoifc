// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	bson "go.mongodb.org/mongo-driver/bson"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	mongoifc "github.com/sv-tools/mongoifc"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// IndexView is an autogenerated mock type for the IndexView type
type IndexView struct {
	mock.Mock
}

type IndexView_Expecter struct {
	mock *mock.Mock
}

func (_m *IndexView) EXPECT() *IndexView_Expecter {
	return &IndexView_Expecter{mock: &_m.Mock}
}

// CreateMany provides a mock function with given fields: ctx, models, opts
func (_m *IndexView) CreateMany(ctx context.Context, models []mongo.IndexModel, opts ...*options.CreateIndexesOptions) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, models)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.IndexModel, ...*options.CreateIndexesOptions) ([]string, error)); ok {
		return rf(ctx, models, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.IndexModel, ...*options.CreateIndexesOptions) []string); ok {
		r0 = rf(ctx, models, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []mongo.IndexModel, ...*options.CreateIndexesOptions) error); ok {
		r1 = rf(ctx, models, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type IndexView_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - models []mongo.IndexModel
//   - opts ...*options.CreateIndexesOptions
func (_e *IndexView_Expecter) CreateMany(ctx interface{}, models interface{}, opts ...interface{}) *IndexView_CreateMany_Call {
	return &IndexView_CreateMany_Call{Call: _e.mock.On("CreateMany",
		append([]interface{}{ctx, models}, opts...)...)}
}

func (_c *IndexView_CreateMany_Call) Run(run func(ctx context.Context, models []mongo.IndexModel, opts ...*options.CreateIndexesOptions)) *IndexView_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateIndexesOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].([]mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_CreateMany_Call) Return(_a0 []string, _a1 error) *IndexView_CreateMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_CreateMany_Call) RunAndReturn(run func(context.Context, []mongo.IndexModel, ...*options.CreateIndexesOptions) ([]string, error)) *IndexView_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOne provides a mock function with given fields: ctx, model, opts
func (_m *IndexView) CreateOne(ctx context.Context, model mongo.IndexModel, opts ...*options.CreateIndexesOptions) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, model)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mongo.IndexModel, ...*options.CreateIndexesOptions) (string, error)); ok {
		return rf(ctx, model, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mongo.IndexModel, ...*options.CreateIndexesOptions) string); ok {
		r0 = rf(ctx, model, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mongo.IndexModel, ...*options.CreateIndexesOptions) error); ok {
		r1 = rf(ctx, model, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_CreateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOne'
type IndexView_CreateOne_Call struct {
	*mock.Call
}

// CreateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - model mongo.IndexModel
//   - opts ...*options.CreateIndexesOptions
func (_e *IndexView_Expecter) CreateOne(ctx interface{}, model interface{}, opts ...interface{}) *IndexView_CreateOne_Call {
	return &IndexView_CreateOne_Call{Call: _e.mock.On("CreateOne",
		append([]interface{}{ctx, model}, opts...)...)}
}

func (_c *IndexView_CreateOne_Call) Run(run func(ctx context.Context, model mongo.IndexModel, opts ...*options.CreateIndexesOptions)) *IndexView_CreateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateIndexesOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_CreateOne_Call) Return(_a0 string, _a1 error) *IndexView_CreateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_CreateOne_Call) RunAndReturn(run func(context.Context, mongo.IndexModel, ...*options.CreateIndexesOptions) (string, error)) *IndexView_CreateOne_Call {
	_c.Call.Return(run)
	return _c
}

// DropAll provides a mock function with given fields: ctx, opts
func (_m *IndexView) DropAll(ctx context.Context, opts ...*options.DropIndexesOptions) (bson.Raw, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DropAll")
	}

	var r0 bson.Raw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.DropIndexesOptions) (bson.Raw, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.DropIndexesOptions) bson.Raw); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bson.Raw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*options.DropIndexesOptions) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_DropAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAll'
type IndexView_DropAll_Call struct {
	*mock.Call
}

// DropAll is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...*options.DropIndexesOptions
func (_e *IndexView_Expecter) DropAll(ctx interface{}, opts ...interface{}) *IndexView_DropAll_Call {
	return &IndexView_DropAll_Call{Call: _e.mock.On("DropAll",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *IndexView_DropAll_Call) Run(run func(ctx context.Context, opts ...*options.DropIndexesOptions)) *IndexView_DropAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DropIndexesOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DropIndexesOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_DropAll_Call) Return(_a0 bson.Raw, _a1 error) *IndexView_DropAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_DropAll_Call) RunAndReturn(run func(context.Context, ...*options.DropIndexesOptions) (bson.Raw, error)) *IndexView_DropAll_Call {
	_c.Call.Return(run)
	return _c
}

// DropOne provides a mock function with given fields: ctx, name, opts
func (_m *IndexView) DropOne(ctx context.Context, name string, opts ...*options.DropIndexesOptions) (bson.Raw, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DropOne")
	}

	var r0 bson.Raw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.DropIndexesOptions) (bson.Raw, error)); ok {
		return rf(ctx, name, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.DropIndexesOptions) bson.Raw); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bson.Raw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*options.DropIndexesOptions) error); ok {
		r1 = rf(ctx, name, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_DropOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropOne'
type IndexView_DropOne_Call struct {
	*mock.Call
}

// DropOne is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts ...*options.DropIndexesOptions
func (_e *IndexView_Expecter) DropOne(ctx interface{}, name interface{}, opts ...interface{}) *IndexView_DropOne_Call {
	return &IndexView_DropOne_Call{Call: _e.mock.On("DropOne",
		append([]interface{}{ctx, name}, opts...)...)}
}

func (_c *IndexView_DropOne_Call) Run(run func(ctx context.Context, name string, opts ...*options.DropIndexesOptions)) *IndexView_DropOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DropIndexesOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DropIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_DropOne_Call) Return(_a0 bson.Raw, _a1 error) *IndexView_DropOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_DropOne_Call) RunAndReturn(run func(context.Context, string, ...*options.DropIndexesOptions) (bson.Raw, error)) *IndexView_DropOne_Call {
	_c.Call.Return(run)
	return _c
}

// DropOneWithKey provides a mock function with given fields: ctx, keySpecDocument, opts
func (_m *IndexView) DropOneWithKey(ctx context.Context, keySpecDocument interface{}, opts ...*options.DropIndexesOptions) (bson.Raw, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, keySpecDocument)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DropOneWithKey")
	}

	var r0 bson.Raw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DropIndexesOptions) (bson.Raw, error)); ok {
		return rf(ctx, keySpecDocument, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DropIndexesOptions) bson.Raw); ok {
		r0 = rf(ctx, keySpecDocument, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bson.Raw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DropIndexesOptions) error); ok {
		r1 = rf(ctx, keySpecDocument, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_DropOneWithKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropOneWithKey'
type IndexView_DropOneWithKey_Call struct {
	*mock.Call
}

// DropOneWithKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keySpecDocument interface{}
//   - opts ...*options.DropIndexesOptions
func (_e *IndexView_Expecter) DropOneWithKey(ctx interface{}, keySpecDocument interface{}, opts ...interface{}) *IndexView_DropOneWithKey_Call {
	return &IndexView_DropOneWithKey_Call{Call: _e.mock.On("DropOneWithKey",
		append([]interface{}{ctx, keySpecDocument}, opts...)...)}
}

func (_c *IndexView_DropOneWithKey_Call) Run(run func(ctx context.Context, keySpecDocument interface{}, opts ...*options.DropIndexesOptions)) *IndexView_DropOneWithKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DropIndexesOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DropIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_DropOneWithKey_Call) Return(_a0 bson.Raw, _a1 error) *IndexView_DropOneWithKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_DropOneWithKey_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.DropIndexesOptions) (bson.Raw, error)) *IndexView_DropOneWithKey_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *IndexView) List(ctx context.Context, opts ...*options.ListIndexesOptions) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.ListIndexesOptions) (mongoifc.Cursor, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.ListIndexesOptions) mongoifc.Cursor); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*options.ListIndexesOptions) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type IndexView_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...*options.ListIndexesOptions
func (_e *IndexView_Expecter) List(ctx interface{}, opts ...interface{}) *IndexView_List_Call {
	return &IndexView_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *IndexView_List_Call) Run(run func(ctx context.Context, opts ...*options.ListIndexesOptions)) *IndexView_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListIndexesOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListIndexesOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_List_Call) Return(_a0 mongoifc.Cursor, _a1 error) *IndexView_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_List_Call) RunAndReturn(run func(context.Context, ...*options.ListIndexesOptions) (mongoifc.Cursor, error)) *IndexView_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListSpecifications provides a mock function with given fields: ctx, opts
func (_m *IndexView) ListSpecifications(ctx context.Context, opts ...*options.ListIndexesOptions) ([]*mongo.IndexSpecification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSpecifications")
	}

	var r0 []*mongo.IndexSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.ListIndexesOptions) ([]*mongo.IndexSpecification, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.ListIndexesOptions) []*mongo.IndexSpecification); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mongo.IndexSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*options.ListIndexesOptions) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexView_ListSpecifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSpecifications'
type IndexView_ListSpecifications_Call struct {
	*mock.Call
}

// ListSpecifications is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...*options.ListIndexesOptions
func (_e *IndexView_Expecter) ListSpecifications(ctx interface{}, opts ...interface{}) *IndexView_ListSpecifications_Call {
	return &IndexView_ListSpecifications_Call{Call: _e.mock.On("ListSpecifications",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *IndexView_ListSpecifications_Call) Run(run func(ctx context.Context, opts ...*options.ListIndexesOptions)) *IndexView_ListSpecifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListIndexesOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListIndexesOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *IndexView_ListSpecifications_Call) Return(_a0 []*mongo.IndexSpecification, _a1 error) *IndexView_ListSpecifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexView_ListSpecifications_Call) RunAndReturn(run func(context.Context, ...*options.ListIndexesOptions) ([]*mongo.IndexSpecification, error)) *IndexView_ListSpecifications_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexView creates a new instance of IndexView. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexView(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexView {
	mock := &IndexView{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
