// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	mongoifc "github.com/sv-tools/mongoifc"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

type Collection_Expecter struct {
	mock *mock.Mock
}

func (_m *Collection) EXPECT() *Collection_Expecter {
	return &Collection_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, pipeline, opts
func (_m *Collection) Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) (mongoifc.Cursor, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) mongoifc.Cursor); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.AggregateOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type Collection_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.AggregateOptions
func (_e *Collection_Expecter) Aggregate(ctx interface{}, pipeline interface{}, opts ...interface{}) *Collection_Aggregate_Call {
	return &Collection_Aggregate_Call{Call: _e.mock.On("Aggregate",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *Collection_Aggregate_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions)) *Collection_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.AggregateOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.AggregateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_Aggregate_Call) Return(_a0 mongoifc.Cursor, _a1 error) *Collection_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Aggregate_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.AggregateOptions) (mongoifc.Cursor, error)) *Collection_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// BulkWrite provides a mock function with given fields: ctx, models, opts
func (_m *Collection) BulkWrite(ctx context.Context, models []mongo.WriteModel, opts ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, models)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BulkWrite")
	}

	var r0 *mongo.BulkWriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error)); ok {
		return rf(ctx, models, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) *mongo.BulkWriteResult); ok {
		r0 = rf(ctx, models, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.BulkWriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) error); ok {
		r1 = rf(ctx, models, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_BulkWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkWrite'
type Collection_BulkWrite_Call struct {
	*mock.Call
}

// BulkWrite is a helper method to define mock.On call
//   - ctx context.Context
//   - models []mongo.WriteModel
//   - opts ...*options.BulkWriteOptions
func (_e *Collection_Expecter) BulkWrite(ctx interface{}, models interface{}, opts ...interface{}) *Collection_BulkWrite_Call {
	return &Collection_BulkWrite_Call{Call: _e.mock.On("BulkWrite",
		append([]interface{}{ctx, models}, opts...)...)}
}

func (_c *Collection_BulkWrite_Call) Run(run func(ctx context.Context, models []mongo.WriteModel, opts ...*options.BulkWriteOptions)) *Collection_BulkWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.BulkWriteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.BulkWriteOptions)
			}
		}
		run(args[0].(context.Context), args[1].([]mongo.WriteModel), variadicArgs...)
	})
	return _c
}

func (_c *Collection_BulkWrite_Call) Return(_a0 *mongo.BulkWriteResult, _a1 error) *Collection_BulkWrite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_BulkWrite_Call) RunAndReturn(run func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error)) *Collection_BulkWrite_Call {
	_c.Call.Return(run)
	return _c
}

// Clone provides a mock function with given fields: opts
func (_m *Collection) Clone(opts ...*options.CollectionOptions) (mongoifc.Collection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 mongoifc.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(...*options.CollectionOptions) (mongoifc.Collection, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*options.CollectionOptions) mongoifc.Collection); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(...*options.CollectionOptions) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type Collection_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - opts ...*options.CollectionOptions
func (_e *Collection_Expecter) Clone(opts ...interface{}) *Collection_Clone_Call {
	return &Collection_Clone_Call{Call: _e.mock.On("Clone",
		append([]interface{}{}, opts...)...)}
}

func (_c *Collection_Clone_Call) Run(run func(opts ...*options.CollectionOptions)) *Collection_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CollectionOptions, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CollectionOptions)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Collection_Clone_Call) Return(_a0 mongoifc.Collection, _a1 error) *Collection_Clone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Clone_Call) RunAndReturn(run func(...*options.CollectionOptions) (mongoifc.Collection, error)) *Collection_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// CountDocuments provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) CountDocuments(ctx context.Context, filter interface{}, opts ...*options.CountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) (int64, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type Collection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.CountOptions
func (_e *Collection_Expecter) CountDocuments(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_CountDocuments_Call {
	return &Collection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_CountDocuments_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.CountOptions)) *Collection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CountOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CountOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_CountDocuments_Call) Return(_a0 int64, _a1 error) *Collection_CountDocuments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_CountDocuments_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.CountOptions) (int64, error)) *Collection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with given fields:
func (_m *Collection) Database() mongoifc.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 mongoifc.Database
	if rf, ok := ret.Get(0).(func() mongoifc.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Database)
		}
	}

	return r0
}

// Collection_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type Collection_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
func (_e *Collection_Expecter) Database() *Collection_Database_Call {
	return &Collection_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *Collection_Database_Call) Run(run func()) *Collection_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Database_Call) Return(_a0 mongoifc.Database) *Collection_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Database_Call) RunAndReturn(run func() mongoifc.Database) *Collection_Database_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) DeleteMany(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) *mongo.DeleteResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type Collection_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.DeleteOptions
func (_e *Collection_Expecter) DeleteMany(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_DeleteMany_Call {
	return &Collection_DeleteMany_Call{Call: _e.mock.On("DeleteMany",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_DeleteMany_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions)) *Collection_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DeleteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DeleteOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_DeleteMany_Call) Return(_a0 *mongo.DeleteResult, _a1 error) *Collection_DeleteMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_DeleteMany_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)) *Collection_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) DeleteOne(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) *mongo.DeleteResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type Collection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.DeleteOptions
func (_e *Collection_Expecter) DeleteOne(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_DeleteOne_Call {
	return &Collection_DeleteOne_Call{Call: _e.mock.On("DeleteOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_DeleteOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions)) *Collection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DeleteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DeleteOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_DeleteOne_Call) Return(_a0 *mongo.DeleteResult, _a1 error) *Collection_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_DeleteOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)) *Collection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Distinct provides a mock function with given fields: ctx, fieldName, filter, opts
func (_m *Collection) Distinct(ctx context.Context, fieldName string, filter interface{}, opts ...*options.DistinctOptions) ([]interface{}, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fieldName, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Distinct")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.DistinctOptions) ([]interface{}, error)); ok {
		return rf(ctx, fieldName, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.DistinctOptions) []interface{}); ok {
		r0 = rf(ctx, fieldName, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, ...*options.DistinctOptions) error); ok {
		r1 = rf(ctx, fieldName, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Distinct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distinct'
type Collection_Distinct_Call struct {
	*mock.Call
}

// Distinct is a helper method to define mock.On call
//   - ctx context.Context
//   - fieldName string
//   - filter interface{}
//   - opts ...*options.DistinctOptions
func (_e *Collection_Expecter) Distinct(ctx interface{}, fieldName interface{}, filter interface{}, opts ...interface{}) *Collection_Distinct_Call {
	return &Collection_Distinct_Call{Call: _e.mock.On("Distinct",
		append([]interface{}{ctx, fieldName, filter}, opts...)...)}
}

func (_c *Collection_Distinct_Call) Run(run func(ctx context.Context, fieldName string, filter interface{}, opts ...*options.DistinctOptions)) *Collection_Distinct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DistinctOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DistinctOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_Distinct_Call) Return(_a0 []interface{}, _a1 error) *Collection_Distinct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Distinct_Call) RunAndReturn(run func(context.Context, string, interface{}, ...*options.DistinctOptions) ([]interface{}, error)) *Collection_Distinct_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *Collection) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type Collection_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Collection_Expecter) Drop(ctx interface{}) *Collection_Drop_Call {
	return &Collection_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *Collection_Drop_Call) Run(run func(ctx context.Context)) *Collection_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Collection_Drop_Call) Return(_a0 error) *Collection_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Drop_Call) RunAndReturn(run func(context.Context) error) *Collection_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// EstimatedDocumentCount provides a mock function with given fields: ctx, opts
func (_m *Collection) EstimatedDocumentCount(ctx context.Context, opts ...*options.EstimatedDocumentCountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EstimatedDocumentCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.EstimatedDocumentCountOptions) (int64, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.EstimatedDocumentCountOptions) int64); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*options.EstimatedDocumentCountOptions) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_EstimatedDocumentCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimatedDocumentCount'
type Collection_EstimatedDocumentCount_Call struct {
	*mock.Call
}

// EstimatedDocumentCount is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...*options.EstimatedDocumentCountOptions
func (_e *Collection_Expecter) EstimatedDocumentCount(ctx interface{}, opts ...interface{}) *Collection_EstimatedDocumentCount_Call {
	return &Collection_EstimatedDocumentCount_Call{Call: _e.mock.On("EstimatedDocumentCount",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *Collection_EstimatedDocumentCount_Call) Run(run func(ctx context.Context, opts ...*options.EstimatedDocumentCountOptions)) *Collection_EstimatedDocumentCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.EstimatedDocumentCountOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.EstimatedDocumentCountOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Collection_EstimatedDocumentCount_Call) Return(_a0 int64, _a1 error) *Collection_EstimatedDocumentCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_EstimatedDocumentCount_Call) RunAndReturn(run func(context.Context, ...*options.EstimatedDocumentCountOptions) (int64, error)) *Collection_EstimatedDocumentCount_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) (mongoifc.Cursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) mongoifc.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type Collection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOptions
func (_e *Collection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_Find_Call {
	return &Collection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_Find_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOptions)) *Collection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_Find_Call) Return(_a0 mongoifc.Cursor, _a1 error) *Collection_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Find_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOptions) (mongoifc.Cursor, error)) *Collection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) mongoifc.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 mongoifc.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneOptions) mongoifc.SingleResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SingleResult)
		}
	}

	return r0
}

// Collection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type Collection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOneOptions
func (_e *Collection_Expecter) FindOne(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_FindOne_Call {
	return &Collection_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_FindOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions)) *Collection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_FindOne_Call) Return(_a0 mongoifc.SingleResult) *Collection_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_FindOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOneOptions) mongoifc.SingleResult) *Collection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndDelete provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) FindOneAndDelete(ctx context.Context, filter interface{}, opts ...*options.FindOneAndDeleteOptions) mongoifc.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndDelete")
	}

	var r0 mongoifc.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneAndDeleteOptions) mongoifc.SingleResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SingleResult)
		}
	}

	return r0
}

// Collection_FindOneAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndDelete'
type Collection_FindOneAndDelete_Call struct {
	*mock.Call
}

// FindOneAndDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOneAndDeleteOptions
func (_e *Collection_Expecter) FindOneAndDelete(ctx interface{}, filter interface{}, opts ...interface{}) *Collection_FindOneAndDelete_Call {
	return &Collection_FindOneAndDelete_Call{Call: _e.mock.On("FindOneAndDelete",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *Collection_FindOneAndDelete_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOneAndDeleteOptions)) *Collection_FindOneAndDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneAndDeleteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneAndDeleteOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_FindOneAndDelete_Call) Return(_a0 mongoifc.SingleResult) *Collection_FindOneAndDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_FindOneAndDelete_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOneAndDeleteOptions) mongoifc.SingleResult) *Collection_FindOneAndDelete_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndReplace provides a mock function with given fields: ctx, filter, replacement, opts
func (_m *Collection) FindOneAndReplace(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.FindOneAndReplaceOptions) mongoifc.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndReplace")
	}

	var r0 mongoifc.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.FindOneAndReplaceOptions) mongoifc.SingleResult); ok {
		r0 = rf(ctx, filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SingleResult)
		}
	}

	return r0
}

// Collection_FindOneAndReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndReplace'
type Collection_FindOneAndReplace_Call struct {
	*mock.Call
}

// FindOneAndReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - replacement interface{}
//   - opts ...*options.FindOneAndReplaceOptions
func (_e *Collection_Expecter) FindOneAndReplace(ctx interface{}, filter interface{}, replacement interface{}, opts ...interface{}) *Collection_FindOneAndReplace_Call {
	return &Collection_FindOneAndReplace_Call{Call: _e.mock.On("FindOneAndReplace",
		append([]interface{}{ctx, filter, replacement}, opts...)...)}
}

func (_c *Collection_FindOneAndReplace_Call) Run(run func(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.FindOneAndReplaceOptions)) *Collection_FindOneAndReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneAndReplaceOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneAndReplaceOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_FindOneAndReplace_Call) Return(_a0 mongoifc.SingleResult) *Collection_FindOneAndReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_FindOneAndReplace_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.FindOneAndReplaceOptions) mongoifc.SingleResult) *Collection_FindOneAndReplace_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndUpdate provides a mock function with given fields: ctx, filter, update, opts
func (_m *Collection) FindOneAndUpdate(ctx context.Context, filter interface{}, update interface{}, opts ...*options.FindOneAndUpdateOptions) mongoifc.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdate")
	}

	var r0 mongoifc.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.FindOneAndUpdateOptions) mongoifc.SingleResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SingleResult)
		}
	}

	return r0
}

// Collection_FindOneAndUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndUpdate'
type Collection_FindOneAndUpdate_Call struct {
	*mock.Call
}

// FindOneAndUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.FindOneAndUpdateOptions
func (_e *Collection_Expecter) FindOneAndUpdate(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *Collection_FindOneAndUpdate_Call {
	return &Collection_FindOneAndUpdate_Call{Call: _e.mock.On("FindOneAndUpdate",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *Collection_FindOneAndUpdate_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.FindOneAndUpdateOptions)) *Collection_FindOneAndUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneAndUpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneAndUpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_FindOneAndUpdate_Call) Return(_a0 mongoifc.SingleResult) *Collection_FindOneAndUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_FindOneAndUpdate_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.FindOneAndUpdateOptions) mongoifc.SingleResult) *Collection_FindOneAndUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Indexes provides a mock function with given fields:
func (_m *Collection) Indexes() mongoifc.IndexView {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Indexes")
	}

	var r0 mongoifc.IndexView
	if rf, ok := ret.Get(0).(func() mongoifc.IndexView); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.IndexView)
		}
	}

	return r0
}

// Collection_Indexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indexes'
type Collection_Indexes_Call struct {
	*mock.Call
}

// Indexes is a helper method to define mock.On call
func (_e *Collection_Expecter) Indexes() *Collection_Indexes_Call {
	return &Collection_Indexes_Call{Call: _e.mock.On("Indexes")}
}

func (_c *Collection_Indexes_Call) Run(run func()) *Collection_Indexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Indexes_Call) Return(_a0 mongoifc.IndexView) *Collection_Indexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Indexes_Call) RunAndReturn(run func() mongoifc.IndexView) *Collection_Indexes_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function with given fields: ctx, documents, opts
func (_m *Collection) InsertMany(ctx context.Context, documents []interface{}, opts ...*options.InsertManyOptions) (*mongo.InsertManyResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, documents)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 *mongo.InsertManyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}, ...*options.InsertManyOptions) (*mongo.InsertManyResult, error)); ok {
		return rf(ctx, documents, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}, ...*options.InsertManyOptions) *mongo.InsertManyResult); ok {
		r0 = rf(ctx, documents, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertManyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []interface{}, ...*options.InsertManyOptions) error); ok {
		r1 = rf(ctx, documents, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type Collection_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - documents []interface{}
//   - opts ...*options.InsertManyOptions
func (_e *Collection_Expecter) InsertMany(ctx interface{}, documents interface{}, opts ...interface{}) *Collection_InsertMany_Call {
	return &Collection_InsertMany_Call{Call: _e.mock.On("InsertMany",
		append([]interface{}{ctx, documents}, opts...)...)}
}

func (_c *Collection_InsertMany_Call) Run(run func(ctx context.Context, documents []interface{}, opts ...*options.InsertManyOptions)) *Collection_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.InsertManyOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.InsertManyOptions)
			}
		}
		run(args[0].(context.Context), args[1].([]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_InsertMany_Call) Return(_a0 *mongo.InsertManyResult, _a1 error) *Collection_InsertMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_InsertMany_Call) RunAndReturn(run func(context.Context, []interface{}, ...*options.InsertManyOptions) (*mongo.InsertManyResult, error)) *Collection_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, document, opts
func (_m *Collection) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) (*mongo.InsertOneResult, error)); ok {
		return rf(ctx, document, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type Collection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document interface{}
//   - opts ...*options.InsertOneOptions
func (_e *Collection_Expecter) InsertOne(ctx interface{}, document interface{}, opts ...interface{}) *Collection_InsertOne_Call {
	return &Collection_InsertOne_Call{Call: _e.mock.On("InsertOne",
		append([]interface{}{ctx, document}, opts...)...)}
}

func (_c *Collection_InsertOne_Call) Run(run func(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions)) *Collection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.InsertOneOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.InsertOneOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_InsertOne_Call) Return(_a0 *mongo.InsertOneResult, _a1 error) *Collection_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_InsertOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.InsertOneOptions) (*mongo.InsertOneResult, error)) *Collection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Collection) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Collection_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Collection_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Collection_Expecter) Name() *Collection_Name_Call {
	return &Collection_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Collection_Name_Call) Run(run func()) *Collection_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_Name_Call) Return(_a0 string) *Collection_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_Name_Call) RunAndReturn(run func() string) *Collection_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceOne provides a mock function with given fields: ctx, filter, replacement, opts
func (_m *Collection) ReplaceOne(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.ReplaceOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, replacement, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) error); ok {
		r1 = rf(ctx, filter, replacement, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_ReplaceOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceOne'
type Collection_ReplaceOne_Call struct {
	*mock.Call
}

// ReplaceOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - replacement interface{}
//   - opts ...*options.ReplaceOptions
func (_e *Collection_Expecter) ReplaceOne(ctx interface{}, filter interface{}, replacement interface{}, opts ...interface{}) *Collection_ReplaceOne_Call {
	return &Collection_ReplaceOne_Call{Call: _e.mock.On("ReplaceOne",
		append([]interface{}{ctx, filter, replacement}, opts...)...)}
}

func (_c *Collection_ReplaceOne_Call) Run(run func(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.ReplaceOptions)) *Collection_ReplaceOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ReplaceOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ReplaceOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_ReplaceOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *Collection_ReplaceOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_ReplaceOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) (*mongo.UpdateResult, error)) *Collection_ReplaceOne_Call {
	_c.Call.Return(run)
	return _c
}

// SearchIndexes provides a mock function with given fields:
func (_m *Collection) SearchIndexes() mongoifc.SearchIndexView {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SearchIndexes")
	}

	var r0 mongoifc.SearchIndexView
	if rf, ok := ret.Get(0).(func() mongoifc.SearchIndexView); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.SearchIndexView)
		}
	}

	return r0
}

// Collection_SearchIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchIndexes'
type Collection_SearchIndexes_Call struct {
	*mock.Call
}

// SearchIndexes is a helper method to define mock.On call
func (_e *Collection_Expecter) SearchIndexes() *Collection_SearchIndexes_Call {
	return &Collection_SearchIndexes_Call{Call: _e.mock.On("SearchIndexes")}
}

func (_c *Collection_SearchIndexes_Call) Run(run func()) *Collection_SearchIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collection_SearchIndexes_Call) Return(_a0 mongoifc.SearchIndexView) *Collection_SearchIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collection_SearchIndexes_Call) RunAndReturn(run func() mongoifc.SearchIndexView) *Collection_SearchIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, id, update, opts
func (_m *Collection) UpdateByID(ctx context.Context, id interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, id, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, id, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, id, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type Collection_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *Collection_Expecter) UpdateByID(ctx interface{}, id interface{}, update interface{}, opts ...interface{}) *Collection_UpdateByID_Call {
	return &Collection_UpdateByID_Call{Call: _e.mock.On("UpdateByID",
		append([]interface{}{ctx, id, update}, opts...)...)}
}

func (_c *Collection_UpdateByID_Call) Run(run func(ctx context.Context, id interface{}, update interface{}, opts ...*options.UpdateOptions)) *Collection_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_UpdateByID_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *Collection_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_UpdateByID_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *Collection_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function with given fields: ctx, filter, update, opts
func (_m *Collection) UpdateMany(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type Collection_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *Collection_Expecter) UpdateMany(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *Collection_UpdateMany_Call {
	return &Collection_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *Collection_UpdateMany_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *Collection_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_UpdateMany_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *Collection_UpdateMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_UpdateMany_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *Collection_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, filter, update, opts
func (_m *Collection) UpdateOne(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type Collection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *Collection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *Collection_UpdateOne_Call {
	return &Collection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *Collection_UpdateOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *Collection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_UpdateOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *Collection_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_UpdateOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *Collection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, pipeline, opts
func (_m *Collection) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (mongoifc.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 mongoifc.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) (mongoifc.ChangeStream, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) mongoifc.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type Collection_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *Collection_Expecter) Watch(ctx interface{}, pipeline interface{}, opts ...interface{}) *Collection_Watch_Call {
	return &Collection_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *Collection_Watch_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *Collection_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Collection_Watch_Call) Return(_a0 mongoifc.ChangeStream, _a1 error) *Collection_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Collection_Watch_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ChangeStreamOptions) (mongoifc.ChangeStream, error)) *Collection_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollection creates a new instance of Collection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collection {
	mock := &Collection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
