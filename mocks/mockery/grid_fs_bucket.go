// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	bson "go.mongodb.org/mongo-driver/v2/bson"

	io "io"

	mock "github.com/stretchr/testify/mock"

	mongoifc "github.com/sv-tools/mongoifc"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// GridFSBucket is an autogenerated mock type for the GridFSBucket type
type GridFSBucket struct {
	mock.Mock
}

type GridFSBucket_Expecter struct {
	mock *mock.Mock
}

func (_m *GridFSBucket) EXPECT() *GridFSBucket_Expecter {
	return &GridFSBucket_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, fileID
func (_m *GridFSBucket) Delete(ctx context.Context, fileID interface{}) error {
	ret := _m.Called(ctx, fileID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSBucket_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GridFSBucket_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID interface{}
func (_e *GridFSBucket_Expecter) Delete(ctx interface{}, fileID interface{}) *GridFSBucket_Delete_Call {
	return &GridFSBucket_Delete_Call{Call: _e.mock.On("Delete", ctx, fileID)}
}

func (_c *GridFSBucket_Delete_Call) Run(run func(ctx context.Context, fileID interface{})) *GridFSBucket_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *GridFSBucket_Delete_Call) Return(_a0 error) *GridFSBucket_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSBucket_Delete_Call) RunAndReturn(run func(context.Context, interface{}) error) *GridFSBucket_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadToStream provides a mock function with given fields: ctx, fileID, stream
func (_m *GridFSBucket) DownloadToStream(ctx context.Context, fileID interface{}, stream io.Writer) (int64, error) {
	ret := _m.Called(ctx, fileID, stream)

	if len(ret) == 0 {
		panic("no return value specified for DownloadToStream")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, io.Writer) (int64, error)); ok {
		return rf(ctx, fileID, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, io.Writer) int64); ok {
		r0 = rf(ctx, fileID, stream)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, io.Writer) error); ok {
		r1 = rf(ctx, fileID, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_DownloadToStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadToStream'
type GridFSBucket_DownloadToStream_Call struct {
	*mock.Call
}

// DownloadToStream is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID interface{}
//   - stream io.Writer
func (_e *GridFSBucket_Expecter) DownloadToStream(ctx interface{}, fileID interface{}, stream interface{}) *GridFSBucket_DownloadToStream_Call {
	return &GridFSBucket_DownloadToStream_Call{Call: _e.mock.On("DownloadToStream", ctx, fileID, stream)}
}

func (_c *GridFSBucket_DownloadToStream_Call) Run(run func(ctx context.Context, fileID interface{}, stream io.Writer)) *GridFSBucket_DownloadToStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(io.Writer))
	})
	return _c
}

func (_c *GridFSBucket_DownloadToStream_Call) Return(_a0 int64, _a1 error) *GridFSBucket_DownloadToStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_DownloadToStream_Call) RunAndReturn(run func(context.Context, interface{}, io.Writer) (int64, error)) *GridFSBucket_DownloadToStream_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadToStreamByName provides a mock function with given fields: ctx, filename, stream, opts
func (_m *GridFSBucket) DownloadToStreamByName(ctx context.Context, filename string, stream io.Writer, opts ...options.Lister[options.GridFSNameOptions]) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filename, stream)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadToStreamByName")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer, ...options.Lister[options.GridFSNameOptions]) (int64, error)); ok {
		return rf(ctx, filename, stream, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer, ...options.Lister[options.GridFSNameOptions]) int64); ok {
		r0 = rf(ctx, filename, stream, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Writer, ...options.Lister[options.GridFSNameOptions]) error); ok {
		r1 = rf(ctx, filename, stream, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_DownloadToStreamByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadToStreamByName'
type GridFSBucket_DownloadToStreamByName_Call struct {
	*mock.Call
}

// DownloadToStreamByName is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
//   - stream io.Writer
//   - opts ...options.Lister[options.GridFSNameOptions]
func (_e *GridFSBucket_Expecter) DownloadToStreamByName(ctx interface{}, filename interface{}, stream interface{}, opts ...interface{}) *GridFSBucket_DownloadToStreamByName_Call {
	return &GridFSBucket_DownloadToStreamByName_Call{Call: _e.mock.On("DownloadToStreamByName",
		append([]interface{}{ctx, filename, stream}, opts...)...)}
}

func (_c *GridFSBucket_DownloadToStreamByName_Call) Run(run func(ctx context.Context, filename string, stream io.Writer, opts ...options.Lister[options.GridFSNameOptions])) *GridFSBucket_DownloadToStreamByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSNameOptions], len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSNameOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Writer), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_DownloadToStreamByName_Call) Return(_a0 int64, _a1 error) *GridFSBucket_DownloadToStreamByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_DownloadToStreamByName_Call) RunAndReturn(run func(context.Context, string, io.Writer, ...options.Lister[options.GridFSNameOptions]) (int64, error)) *GridFSBucket_DownloadToStreamByName_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *GridFSBucket) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSBucket_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type GridFSBucket_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GridFSBucket_Expecter) Drop(ctx interface{}) *GridFSBucket_Drop_Call {
	return &GridFSBucket_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *GridFSBucket_Drop_Call) Run(run func(ctx context.Context)) *GridFSBucket_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GridFSBucket_Drop_Call) Return(_a0 error) *GridFSBucket_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSBucket_Drop_Call) RunAndReturn(run func(context.Context) error) *GridFSBucket_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *GridFSBucket) Find(ctx context.Context, filter interface{}, opts ...options.Lister[options.GridFSFindOptions]) (mongoifc.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 mongoifc.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.GridFSFindOptions]) (mongoifc.Cursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.GridFSFindOptions]) mongoifc.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.GridFSFindOptions]) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type GridFSBucket_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...options.Lister[options.GridFSFindOptions]
func (_e *GridFSBucket_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *GridFSBucket_Find_Call {
	return &GridFSBucket_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *GridFSBucket_Find_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.GridFSFindOptions])) *GridFSBucket_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSFindOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSFindOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_Find_Call) Return(_a0 mongoifc.Cursor, _a1 error) *GridFSBucket_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_Find_Call) RunAndReturn(run func(context.Context, interface{}, ...options.Lister[options.GridFSFindOptions]) (mongoifc.Cursor, error)) *GridFSBucket_Find_Call {
	_c.Call.Return(run)
	return _c
}

// GetChunksCollection provides a mock function with no fields
func (_m *GridFSBucket) GetChunksCollection() mongoifc.Collection {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChunksCollection")
	}

	var r0 mongoifc.Collection
	if rf, ok := ret.Get(0).(func() mongoifc.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Collection)
		}
	}

	return r0
}

// GridFSBucket_GetChunksCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChunksCollection'
type GridFSBucket_GetChunksCollection_Call struct {
	*mock.Call
}

// GetChunksCollection is a helper method to define mock.On call
func (_e *GridFSBucket_Expecter) GetChunksCollection() *GridFSBucket_GetChunksCollection_Call {
	return &GridFSBucket_GetChunksCollection_Call{Call: _e.mock.On("GetChunksCollection")}
}

func (_c *GridFSBucket_GetChunksCollection_Call) Run(run func()) *GridFSBucket_GetChunksCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSBucket_GetChunksCollection_Call) Return(_a0 mongoifc.Collection) *GridFSBucket_GetChunksCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSBucket_GetChunksCollection_Call) RunAndReturn(run func() mongoifc.Collection) *GridFSBucket_GetChunksCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilesCollection provides a mock function with no fields
func (_m *GridFSBucket) GetFilesCollection() mongoifc.Collection {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilesCollection")
	}

	var r0 mongoifc.Collection
	if rf, ok := ret.Get(0).(func() mongoifc.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.Collection)
		}
	}

	return r0
}

// GridFSBucket_GetFilesCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilesCollection'
type GridFSBucket_GetFilesCollection_Call struct {
	*mock.Call
}

// GetFilesCollection is a helper method to define mock.On call
func (_e *GridFSBucket_Expecter) GetFilesCollection() *GridFSBucket_GetFilesCollection_Call {
	return &GridFSBucket_GetFilesCollection_Call{Call: _e.mock.On("GetFilesCollection")}
}

func (_c *GridFSBucket_GetFilesCollection_Call) Run(run func()) *GridFSBucket_GetFilesCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSBucket_GetFilesCollection_Call) Return(_a0 mongoifc.Collection) *GridFSBucket_GetFilesCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSBucket_GetFilesCollection_Call) RunAndReturn(run func() mongoifc.Collection) *GridFSBucket_GetFilesCollection_Call {
	_c.Call.Return(run)
	return _c
}

// OpenDownloadStream provides a mock function with given fields: ctx, fileID
func (_m *GridFSBucket) OpenDownloadStream(ctx context.Context, fileID interface{}) (mongoifc.GridFSDownloadStream, error) {
	ret := _m.Called(ctx, fileID)

	if len(ret) == 0 {
		panic("no return value specified for OpenDownloadStream")
	}

	var r0 mongoifc.GridFSDownloadStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (mongoifc.GridFSDownloadStream, error)); ok {
		return rf(ctx, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mongoifc.GridFSDownloadStream); ok {
		r0 = rf(ctx, fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.GridFSDownloadStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_OpenDownloadStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenDownloadStream'
type GridFSBucket_OpenDownloadStream_Call struct {
	*mock.Call
}

// OpenDownloadStream is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID interface{}
func (_e *GridFSBucket_Expecter) OpenDownloadStream(ctx interface{}, fileID interface{}) *GridFSBucket_OpenDownloadStream_Call {
	return &GridFSBucket_OpenDownloadStream_Call{Call: _e.mock.On("OpenDownloadStream", ctx, fileID)}
}

func (_c *GridFSBucket_OpenDownloadStream_Call) Run(run func(ctx context.Context, fileID interface{})) *GridFSBucket_OpenDownloadStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *GridFSBucket_OpenDownloadStream_Call) Return(_a0 mongoifc.GridFSDownloadStream, _a1 error) *GridFSBucket_OpenDownloadStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_OpenDownloadStream_Call) RunAndReturn(run func(context.Context, interface{}) (mongoifc.GridFSDownloadStream, error)) *GridFSBucket_OpenDownloadStream_Call {
	_c.Call.Return(run)
	return _c
}

// OpenDownloadStreamByName provides a mock function with given fields: ctx, filename, opts
func (_m *GridFSBucket) OpenDownloadStreamByName(ctx context.Context, filename string, opts ...options.Lister[options.GridFSNameOptions]) (mongoifc.GridFSDownloadStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenDownloadStreamByName")
	}

	var r0 mongoifc.GridFSDownloadStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.Lister[options.GridFSNameOptions]) (mongoifc.GridFSDownloadStream, error)); ok {
		return rf(ctx, filename, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.Lister[options.GridFSNameOptions]) mongoifc.GridFSDownloadStream); ok {
		r0 = rf(ctx, filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.GridFSDownloadStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...options.Lister[options.GridFSNameOptions]) error); ok {
		r1 = rf(ctx, filename, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_OpenDownloadStreamByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenDownloadStreamByName'
type GridFSBucket_OpenDownloadStreamByName_Call struct {
	*mock.Call
}

// OpenDownloadStreamByName is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
//   - opts ...options.Lister[options.GridFSNameOptions]
func (_e *GridFSBucket_Expecter) OpenDownloadStreamByName(ctx interface{}, filename interface{}, opts ...interface{}) *GridFSBucket_OpenDownloadStreamByName_Call {
	return &GridFSBucket_OpenDownloadStreamByName_Call{Call: _e.mock.On("OpenDownloadStreamByName",
		append([]interface{}{ctx, filename}, opts...)...)}
}

func (_c *GridFSBucket_OpenDownloadStreamByName_Call) Run(run func(ctx context.Context, filename string, opts ...options.Lister[options.GridFSNameOptions])) *GridFSBucket_OpenDownloadStreamByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSNameOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSNameOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_OpenDownloadStreamByName_Call) Return(_a0 mongoifc.GridFSDownloadStream, _a1 error) *GridFSBucket_OpenDownloadStreamByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_OpenDownloadStreamByName_Call) RunAndReturn(run func(context.Context, string, ...options.Lister[options.GridFSNameOptions]) (mongoifc.GridFSDownloadStream, error)) *GridFSBucket_OpenDownloadStreamByName_Call {
	_c.Call.Return(run)
	return _c
}

// OpenUploadStream provides a mock function with given fields: ctx, filename, opts
func (_m *GridFSBucket) OpenUploadStream(ctx context.Context, filename string, opts ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenUploadStream")
	}

	var r0 mongoifc.GridFSUploadStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error)); ok {
		return rf(ctx, filename, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.Lister[options.GridFSUploadOptions]) mongoifc.GridFSUploadStream); ok {
		r0 = rf(ctx, filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.GridFSUploadStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...options.Lister[options.GridFSUploadOptions]) error); ok {
		r1 = rf(ctx, filename, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_OpenUploadStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenUploadStream'
type GridFSBucket_OpenUploadStream_Call struct {
	*mock.Call
}

// OpenUploadStream is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
//   - opts ...options.Lister[options.GridFSUploadOptions]
func (_e *GridFSBucket_Expecter) OpenUploadStream(ctx interface{}, filename interface{}, opts ...interface{}) *GridFSBucket_OpenUploadStream_Call {
	return &GridFSBucket_OpenUploadStream_Call{Call: _e.mock.On("OpenUploadStream",
		append([]interface{}{ctx, filename}, opts...)...)}
}

func (_c *GridFSBucket_OpenUploadStream_Call) Run(run func(ctx context.Context, filename string, opts ...options.Lister[options.GridFSUploadOptions])) *GridFSBucket_OpenUploadStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSUploadOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSUploadOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_OpenUploadStream_Call) Return(_a0 mongoifc.GridFSUploadStream, _a1 error) *GridFSBucket_OpenUploadStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_OpenUploadStream_Call) RunAndReturn(run func(context.Context, string, ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error)) *GridFSBucket_OpenUploadStream_Call {
	_c.Call.Return(run)
	return _c
}

// OpenUploadStreamWithID provides a mock function with given fields: ctx, fileID, filename, opts
func (_m *GridFSBucket) OpenUploadStreamWithID(ctx context.Context, fileID interface{}, filename string, opts ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fileID, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenUploadStreamWithID")
	}

	var r0 mongoifc.GridFSUploadStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error)); ok {
		return rf(ctx, fileID, filename, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...options.Lister[options.GridFSUploadOptions]) mongoifc.GridFSUploadStream); ok {
		r0 = rf(ctx, fileID, filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongoifc.GridFSUploadStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string, ...options.Lister[options.GridFSUploadOptions]) error); ok {
		r1 = rf(ctx, fileID, filename, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_OpenUploadStreamWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenUploadStreamWithID'
type GridFSBucket_OpenUploadStreamWithID_Call struct {
	*mock.Call
}

// OpenUploadStreamWithID is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID interface{}
//   - filename string
//   - opts ...options.Lister[options.GridFSUploadOptions]
func (_e *GridFSBucket_Expecter) OpenUploadStreamWithID(ctx interface{}, fileID interface{}, filename interface{}, opts ...interface{}) *GridFSBucket_OpenUploadStreamWithID_Call {
	return &GridFSBucket_OpenUploadStreamWithID_Call{Call: _e.mock.On("OpenUploadStreamWithID",
		append([]interface{}{ctx, fileID, filename}, opts...)...)}
}

func (_c *GridFSBucket_OpenUploadStreamWithID_Call) Run(run func(ctx context.Context, fileID interface{}, filename string, opts ...options.Lister[options.GridFSUploadOptions])) *GridFSBucket_OpenUploadStreamWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSUploadOptions], len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSUploadOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_OpenUploadStreamWithID_Call) Return(_a0 mongoifc.GridFSUploadStream, _a1 error) *GridFSBucket_OpenUploadStreamWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_OpenUploadStreamWithID_Call) RunAndReturn(run func(context.Context, interface{}, string, ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error)) *GridFSBucket_OpenUploadStreamWithID_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: ctx, fileID, newFilename
func (_m *GridFSBucket) Rename(ctx context.Context, fileID interface{}, newFilename string) error {
	ret := _m.Called(ctx, fileID, newFilename)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) error); ok {
		r0 = rf(ctx, fileID, newFilename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSBucket_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type GridFSBucket_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID interface{}
//   - newFilename string
func (_e *GridFSBucket_Expecter) Rename(ctx interface{}, fileID interface{}, newFilename interface{}) *GridFSBucket_Rename_Call {
	return &GridFSBucket_Rename_Call{Call: _e.mock.On("Rename", ctx, fileID, newFilename)}
}

func (_c *GridFSBucket_Rename_Call) Run(run func(ctx context.Context, fileID interface{}, newFilename string)) *GridFSBucket_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *GridFSBucket_Rename_Call) Return(_a0 error) *GridFSBucket_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSBucket_Rename_Call) RunAndReturn(run func(context.Context, interface{}, string) error) *GridFSBucket_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFromStream provides a mock function with given fields: ctx, filename, source, opts
func (_m *GridFSBucket) UploadFromStream(ctx context.Context, filename string, source io.Reader, opts ...options.Lister[options.GridFSUploadOptions]) (bson.ObjectID, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filename, source)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadFromStream")
	}

	var r0 bson.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...options.Lister[options.GridFSUploadOptions]) (bson.ObjectID, error)); ok {
		return rf(ctx, filename, source, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...options.Lister[options.GridFSUploadOptions]) bson.ObjectID); ok {
		r0 = rf(ctx, filename, source, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bson.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...options.Lister[options.GridFSUploadOptions]) error); ok {
		r1 = rf(ctx, filename, source, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSBucket_UploadFromStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFromStream'
type GridFSBucket_UploadFromStream_Call struct {
	*mock.Call
}

// UploadFromStream is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
//   - source io.Reader
//   - opts ...options.Lister[options.GridFSUploadOptions]
func (_e *GridFSBucket_Expecter) UploadFromStream(ctx interface{}, filename interface{}, source interface{}, opts ...interface{}) *GridFSBucket_UploadFromStream_Call {
	return &GridFSBucket_UploadFromStream_Call{Call: _e.mock.On("UploadFromStream",
		append([]interface{}{ctx, filename, source}, opts...)...)}
}

func (_c *GridFSBucket_UploadFromStream_Call) Run(run func(ctx context.Context, filename string, source io.Reader, opts ...options.Lister[options.GridFSUploadOptions])) *GridFSBucket_UploadFromStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSUploadOptions], len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSUploadOptions])
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_UploadFromStream_Call) Return(_a0 bson.ObjectID, _a1 error) *GridFSBucket_UploadFromStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSBucket_UploadFromStream_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...options.Lister[options.GridFSUploadOptions]) (bson.ObjectID, error)) *GridFSBucket_UploadFromStream_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFromStreamWithID provides a mock function with given fields: ctx, fileID, filename, source, opts
func (_m *GridFSBucket) UploadFromStreamWithID(ctx context.Context, fileID interface{}, filename string, source io.Reader, opts ...options.Lister[options.GridFSUploadOptions]) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fileID, filename, source)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadFromStreamWithID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, io.Reader, ...options.Lister[options.GridFSUploadOptions]) error); ok {
		r0 = rf(ctx, fileID, filename, source, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSBucket_UploadFromStreamWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFromStreamWithID'
type GridFSBucket_UploadFromStreamWithID_Call struct {
	*mock.Call
}

// UploadFromStreamWithID is a helper method to define mock.On call
//   - ctx context.Context
//   - fileID interface{}
//   - filename string
//   - source io.Reader
//   - opts ...options.Lister[options.GridFSUploadOptions]
func (_e *GridFSBucket_Expecter) UploadFromStreamWithID(ctx interface{}, fileID interface{}, filename interface{}, source interface{}, opts ...interface{}) *GridFSBucket_UploadFromStreamWithID_Call {
	return &GridFSBucket_UploadFromStreamWithID_Call{Call: _e.mock.On("UploadFromStreamWithID",
		append([]interface{}{ctx, fileID, filename, source}, opts...)...)}
}

func (_c *GridFSBucket_UploadFromStreamWithID_Call) Run(run func(ctx context.Context, fileID interface{}, filename string, source io.Reader, opts ...options.Lister[options.GridFSUploadOptions])) *GridFSBucket_UploadFromStreamWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.Lister[options.GridFSUploadOptions], len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.GridFSUploadOptions])
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *GridFSBucket_UploadFromStreamWithID_Call) Return(_a0 error) *GridFSBucket_UploadFromStreamWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSBucket_UploadFromStreamWithID_Call) RunAndReturn(run func(context.Context, interface{}, string, io.Reader, ...options.Lister[options.GridFSUploadOptions]) error) *GridFSBucket_UploadFromStreamWithID_Call {
	_c.Call.Return(run)
	return _c
}

// NewGridFSBucket creates a new instance of GridFSBucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGridFSBucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *GridFSBucket {
	mock := &GridFSBucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
