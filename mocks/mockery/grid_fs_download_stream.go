// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/v2/mongo"
)

// GridFSDownloadStream is an autogenerated mock type for the GridFSDownloadStream type
type GridFSDownloadStream struct {
	mock.Mock
}

type GridFSDownloadStream_Expecter struct {
	mock *mock.Mock
}

func (_m *GridFSDownloadStream) EXPECT() *GridFSDownloadStream_Expecter {
	return &GridFSDownloadStream_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *GridFSDownloadStream) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GridFSDownloadStream_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type GridFSDownloadStream_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *GridFSDownloadStream_Expecter) Close() *GridFSDownloadStream_Close_Call {
	return &GridFSDownloadStream_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *GridFSDownloadStream_Close_Call) Run(run func()) *GridFSDownloadStream_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSDownloadStream_Close_Call) Return(_a0 error) *GridFSDownloadStream_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSDownloadStream_Close_Call) RunAndReturn(run func() error) *GridFSDownloadStream_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with no fields
func (_m *GridFSDownloadStream) GetFile() *mongo.GridFSFile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *mongo.GridFSFile
	if rf, ok := ret.Get(0).(func() *mongo.GridFSFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.GridFSFile)
		}
	}

	return r0
}

// GridFSDownloadStream_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type GridFSDownloadStream_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
func (_e *GridFSDownloadStream_Expecter) GetFile() *GridFSDownloadStream_GetFile_Call {
	return &GridFSDownloadStream_GetFile_Call{Call: _e.mock.On("GetFile")}
}

func (_c *GridFSDownloadStream_GetFile_Call) Run(run func()) *GridFSDownloadStream_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GridFSDownloadStream_GetFile_Call) Return(_a0 *mongo.GridFSFile) *GridFSDownloadStream_GetFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GridFSDownloadStream_GetFile_Call) RunAndReturn(run func() *mongo.GridFSFile) *GridFSDownloadStream_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *GridFSDownloadStream) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSDownloadStream_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type GridFSDownloadStream_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *GridFSDownloadStream_Expecter) Read(p interface{}) *GridFSDownloadStream_Read_Call {
	return &GridFSDownloadStream_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *GridFSDownloadStream_Read_Call) Run(run func(p []byte)) *GridFSDownloadStream_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *GridFSDownloadStream_Read_Call) Return(_a0 int, _a1 error) *GridFSDownloadStream_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSDownloadStream_Read_Call) RunAndReturn(run func([]byte) (int, error)) *GridFSDownloadStream_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Skip provides a mock function with given fields: skip
func (_m *GridFSDownloadStream) Skip(skip int64) (int64, error) {
	ret := _m.Called(skip)

	if len(ret) == 0 {
		panic("no return value specified for Skip")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(skip)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(skip)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GridFSDownloadStream_Skip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Skip'
type GridFSDownloadStream_Skip_Call struct {
	*mock.Call
}

// Skip is a helper method to define mock.On call
//   - skip int64
func (_e *GridFSDownloadStream_Expecter) Skip(skip interface{}) *GridFSDownloadStream_Skip_Call {
	return &GridFSDownloadStream_Skip_Call{Call: _e.mock.On("Skip", skip)}
}

func (_c *GridFSDownloadStream_Skip_Call) Run(run func(skip int64)) *GridFSDownloadStream_Skip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *GridFSDownloadStream_Skip_Call) Return(_a0 int64, _a1 error) *GridFSDownloadStream_Skip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GridFSDownloadStream_Skip_Call) RunAndReturn(run func(int64) (int64, error)) *GridFSDownloadStream_Skip_Call {
	_c.Call.Return(run)
	return _c
}

// NewGridFSDownloadStream creates a new instance of GridFSDownloadStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGridFSDownloadStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *GridFSDownloadStream {
	mock := &GridFSDownloadStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
