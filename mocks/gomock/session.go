// Code generated by MockGen. DO NOT EDIT.
// Source: ./session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongoifc "github.com/sv-tools/mongoifc"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockSession) AbortTransaction(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTransaction", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockSessionMockRecorder) AbortTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockSession)(nil).AbortTransaction), ctx)
}

// AdvanceClusterTime mocks base method.
func (m *MockSession) AdvanceClusterTime(arg0 bson.Raw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceClusterTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceClusterTime indicates an expected call of AdvanceClusterTime.
func (mr *MockSessionMockRecorder) AdvanceClusterTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceClusterTime", reflect.TypeOf((*MockSession)(nil).AdvanceClusterTime), arg0)
}

// AdvanceOperationTime mocks base method.
func (m *MockSession) AdvanceOperationTime(arg0 *primitive.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceOperationTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceOperationTime indicates an expected call of AdvanceOperationTime.
func (mr *MockSessionMockRecorder) AdvanceOperationTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceOperationTime", reflect.TypeOf((*MockSession)(nil).AdvanceOperationTime), arg0)
}

// Client mocks base method.
func (m *MockSession) Client() mongoifc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(mongoifc.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockSessionMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSession)(nil).Client))
}

// ClusterTime mocks base method.
func (m *MockSession) ClusterTime() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterTime")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// ClusterTime indicates an expected call of ClusterTime.
func (mr *MockSessionMockRecorder) ClusterTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterTime", reflect.TypeOf((*MockSession)(nil).ClusterTime))
}

// CommitTransaction mocks base method.
func (m *MockSession) CommitTransaction(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockSessionMockRecorder) CommitTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockSession)(nil).CommitTransaction), ctx)
}

// EndSession mocks base method.
func (m *MockSession) EndSession(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSession", ctx)
}

// EndSession indicates an expected call of EndSession.
func (mr *MockSessionMockRecorder) EndSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockSession)(nil).EndSession), ctx)
}

// ID mocks base method.
func (m *MockSession) ID() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSession)(nil).ID))
}

// OperationTime mocks base method.
func (m *MockSession) OperationTime() *primitive.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationTime")
	ret0, _ := ret[0].(*primitive.Timestamp)
	return ret0
}

// OperationTime indicates an expected call of OperationTime.
func (mr *MockSessionMockRecorder) OperationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationTime", reflect.TypeOf((*MockSession)(nil).OperationTime))
}

// StartTransaction mocks base method.
func (m *MockSession) StartTransaction(opts ...*options.TransactionOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockSessionMockRecorder) StartTransaction(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockSession)(nil).StartTransaction), opts...)
}

// WithTransaction mocks base method.
func (m *MockSession) WithTransaction(ctx context.Context, fn func(mongo.SessionContext) (interface{}, error), opts ...*options.TransactionOptions) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithTransaction", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockSessionMockRecorder) WithTransaction(ctx, fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockSession)(nil).WithTransaction), varargs...)
}

// WrappedSession mocks base method.
func (m *MockSession) WrappedSession() mongo.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrappedSession")
	ret0, _ := ret[0].(mongo.Session)
	return ret0
}

// WrappedSession indicates an expected call of WrappedSession.
func (mr *MockSessionMockRecorder) WrappedSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrappedSession", reflect.TypeOf((*MockSession)(nil).WrappedSession))
}
