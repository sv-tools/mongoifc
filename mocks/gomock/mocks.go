// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sv-tools/mongoifc/v2 (interfaces: ChangeStream,Client,ClientEncryption,Collection,Cursor,Database,DistinctResult,GridFSBucket,GridFSDownloadStream,GridFSUploadStream,IndexView,SearchIndexView,Session,SingleResult)
//
// Generated by this command:
//
//	mockgen -destination=mocks/gomock/mocks.go -package mocks . ChangeStream,Client,ClientEncryption,Collection,Cursor,Database,DistinctResult,GridFSBucket,GridFSDownloadStream,GridFSUploadStream,IndexView,SearchIndexView,Session,SingleResult
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	mongoifc "github.com/sv-tools/mongoifc/v2"
	bson "go.mongodb.org/mongo-driver/v2/bson"
	mongo "go.mongodb.org/mongo-driver/v2/mongo"
	options "go.mongodb.org/mongo-driver/v2/mongo/options"
	readpref "go.mongodb.org/mongo-driver/v2/mongo/readpref"
	gomock "go.uber.org/mock/gomock"
)

// MockChangeStream is a mock of ChangeStream interface.
type MockChangeStream struct {
	ctrl     *gomock.Controller
	recorder *MockChangeStreamMockRecorder
	isgomock struct{}
}

// MockChangeStreamMockRecorder is the mock recorder for MockChangeStream.
type MockChangeStreamMockRecorder struct {
	mock *MockChangeStream
}

// NewMockChangeStream creates a new mock instance.
func NewMockChangeStream(ctrl *gomock.Controller) *MockChangeStream {
	mock := &MockChangeStream{ctrl: ctrl}
	mock.recorder = &MockChangeStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeStream) EXPECT() *MockChangeStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockChangeStream) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChangeStreamMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChangeStream)(nil).Close), ctx)
}

// Current mocks base method.
func (m *MockChangeStream) Current() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockChangeStreamMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockChangeStream)(nil).Current))
}

// Decode mocks base method.
func (m *MockChangeStream) Decode(val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockChangeStreamMockRecorder) Decode(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockChangeStream)(nil).Decode), val)
}

// Err mocks base method.
func (m *MockChangeStream) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockChangeStreamMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockChangeStream)(nil).Err))
}

// ID mocks base method.
func (m *MockChangeStream) ID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockChangeStreamMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockChangeStream)(nil).ID))
}

// Next mocks base method.
func (m *MockChangeStream) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockChangeStreamMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockChangeStream)(nil).Next), ctx)
}

// RemainingBatchLength mocks base method.
func (m *MockChangeStream) RemainingBatchLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemainingBatchLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// RemainingBatchLength indicates an expected call of RemainingBatchLength.
func (mr *MockChangeStreamMockRecorder) RemainingBatchLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemainingBatchLength", reflect.TypeOf((*MockChangeStream)(nil).RemainingBatchLength))
}

// ResumeToken mocks base method.
func (m *MockChangeStream) ResumeToken() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeToken")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// ResumeToken indicates an expected call of ResumeToken.
func (mr *MockChangeStreamMockRecorder) ResumeToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeToken", reflect.TypeOf((*MockChangeStream)(nil).ResumeToken))
}

// SetBatchSize mocks base method.
func (m *MockChangeStream) SetBatchSize(size int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBatchSize", size)
}

// SetBatchSize indicates an expected call of SetBatchSize.
func (mr *MockChangeStreamMockRecorder) SetBatchSize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatchSize", reflect.TypeOf((*MockChangeStream)(nil).SetBatchSize), size)
}

// TryNext mocks base method.
func (m *MockChangeStream) TryNext(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryNext", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryNext indicates an expected call of TryNext.
func (mr *MockChangeStreamMockRecorder) TryNext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryNext", reflect.TypeOf((*MockChangeStream)(nil).TryNext), ctx)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockClient) Database(name string, opts ...options.Lister[options.DatabaseOptions]) mongoifc.Database {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(mongoifc.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockClientMockRecorder) Database(name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClient)(nil).Database), varargs...)
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), ctx)
}

// ListDatabaseNames mocks base method.
func (m *MockClient) ListDatabaseNames(ctx context.Context, filter any, opts ...options.Lister[options.ListDatabasesOptions]) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabaseNames", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabaseNames indicates an expected call of ListDatabaseNames.
func (mr *MockClientMockRecorder) ListDatabaseNames(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseNames", reflect.TypeOf((*MockClient)(nil).ListDatabaseNames), varargs...)
}

// ListDatabases mocks base method.
func (m *MockClient) ListDatabases(ctx context.Context, filter any, opts ...options.Lister[options.ListDatabasesOptions]) (mongo.ListDatabasesResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabases", varargs...)
	ret0, _ := ret[0].(mongo.ListDatabasesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockClientMockRecorder) ListDatabases(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockClient)(nil).ListDatabases), varargs...)
}

// NumberSessionsInProgress mocks base method.
func (m *MockClient) NumberSessionsInProgress() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberSessionsInProgress")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumberSessionsInProgress indicates an expected call of NumberSessionsInProgress.
func (mr *MockClientMockRecorder) NumberSessionsInProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberSessionsInProgress", reflect.TypeOf((*MockClient)(nil).NumberSessionsInProgress))
}

// Ping mocks base method.
func (m *MockClient) Ping(ctx context.Context, rp *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, rp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(ctx, rp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), ctx, rp)
}

// StartSession mocks base method.
func (m *MockClient) StartSession(opts ...options.Lister[options.SessionOptions]) (mongoifc.Session, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSession", varargs...)
	ret0, _ := ret[0].(mongoifc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockClientMockRecorder) StartSession(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockClient)(nil).StartSession), opts...)
}

// UseSession mocks base method.
func (m *MockClient) UseSession(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSession", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseSession indicates an expected call of UseSession.
func (mr *MockClientMockRecorder) UseSession(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSession", reflect.TypeOf((*MockClient)(nil).UseSession), ctx, fn)
}

// UseSessionWithOptions mocks base method.
func (m *MockClient) UseSessionWithOptions(ctx context.Context, opts *options.SessionOptionsBuilder, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSessionWithOptions", ctx, opts, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseSessionWithOptions indicates an expected call of UseSessionWithOptions.
func (mr *MockClientMockRecorder) UseSessionWithOptions(ctx, opts, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSessionWithOptions", reflect.TypeOf((*MockClient)(nil).UseSessionWithOptions), ctx, opts, fn)
}

// Watch mocks base method.
func (m *MockClient) Watch(ctx context.Context, pipeline any, opts ...options.Lister[options.ChangeStreamOptions]) (mongoifc.ChangeStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(mongoifc.ChangeStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClientMockRecorder) Watch(ctx, pipeline any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), varargs...)
}

// MockClientEncryption is a mock of ClientEncryption interface.
type MockClientEncryption struct {
	ctrl     *gomock.Controller
	recorder *MockClientEncryptionMockRecorder
	isgomock struct{}
}

// MockClientEncryptionMockRecorder is the mock recorder for MockClientEncryption.
type MockClientEncryptionMockRecorder struct {
	mock *MockClientEncryption
}

// NewMockClientEncryption creates a new mock instance.
func NewMockClientEncryption(ctrl *gomock.Controller) *MockClientEncryption {
	mock := &MockClientEncryption{ctrl: ctrl}
	mock.recorder = &MockClientEncryptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientEncryption) EXPECT() *MockClientEncryptionMockRecorder {
	return m.recorder
}

// AddKeyAltName mocks base method.
func (m *MockClientEncryption) AddKeyAltName(ctx context.Context, id bson.Binary, keyAltName string) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKeyAltName", ctx, id, keyAltName)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// AddKeyAltName indicates an expected call of AddKeyAltName.
func (mr *MockClientEncryptionMockRecorder) AddKeyAltName(ctx, id, keyAltName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeyAltName", reflect.TypeOf((*MockClientEncryption)(nil).AddKeyAltName), ctx, id, keyAltName)
}

// Close mocks base method.
func (m *MockClientEncryption) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientEncryptionMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientEncryption)(nil).Close), ctx)
}

// CreateDataKey mocks base method.
func (m *MockClientEncryption) CreateDataKey(ctx context.Context, kmsProvider string, opts ...options.Lister[options.DataKeyOptions]) (bson.Binary, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, kmsProvider}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataKey", varargs...)
	ret0, _ := ret[0].(bson.Binary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataKey indicates an expected call of CreateDataKey.
func (mr *MockClientEncryptionMockRecorder) CreateDataKey(ctx, kmsProvider any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, kmsProvider}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataKey", reflect.TypeOf((*MockClientEncryption)(nil).CreateDataKey), varargs...)
}

// CreateEncryptedCollection mocks base method.
func (m *MockClientEncryption) CreateEncryptedCollection(ctx context.Context, db mongoifc.Database, coll string, createOpts options.Lister[options.CreateCollectionOptions], kmsProvider string, masterKey any) (mongoifc.Collection, bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEncryptedCollection", ctx, db, coll, createOpts, kmsProvider, masterKey)
	ret0, _ := ret[0].(mongoifc.Collection)
	ret1, _ := ret[1].(bson.M)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEncryptedCollection indicates an expected call of CreateEncryptedCollection.
func (mr *MockClientEncryptionMockRecorder) CreateEncryptedCollection(ctx, db, coll, createOpts, kmsProvider, masterKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEncryptedCollection", reflect.TypeOf((*MockClientEncryption)(nil).CreateEncryptedCollection), ctx, db, coll, createOpts, kmsProvider, masterKey)
}

// Decrypt mocks base method.
func (m *MockClientEncryption) Decrypt(ctx context.Context, val bson.Binary) (bson.RawValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, val)
	ret0, _ := ret[0].(bson.RawValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockClientEncryptionMockRecorder) Decrypt(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockClientEncryption)(nil).Decrypt), ctx, val)
}

// DeleteKey mocks base method.
func (m *MockClientEncryption) DeleteKey(ctx context.Context, id bson.Binary) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, id)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockClientEncryptionMockRecorder) DeleteKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockClientEncryption)(nil).DeleteKey), ctx, id)
}

// Encrypt mocks base method.
func (m *MockClientEncryption) Encrypt(ctx context.Context, val bson.RawValue, opts ...options.Lister[options.EncryptOptions]) (bson.Binary, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Encrypt", varargs...)
	ret0, _ := ret[0].(bson.Binary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockClientEncryptionMockRecorder) Encrypt(ctx, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockClientEncryption)(nil).Encrypt), varargs...)
}

// EncryptExpression mocks base method.
func (m *MockClientEncryption) EncryptExpression(ctx context.Context, expr, result any, opts ...options.Lister[options.EncryptOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, expr, result}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EncryptExpression", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncryptExpression indicates an expected call of EncryptExpression.
func (mr *MockClientEncryptionMockRecorder) EncryptExpression(ctx, expr, result any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, expr, result}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptExpression", reflect.TypeOf((*MockClientEncryption)(nil).EncryptExpression), varargs...)
}

// GetKey mocks base method.
func (m *MockClientEncryption) GetKey(ctx context.Context, id bson.Binary) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, id)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockClientEncryptionMockRecorder) GetKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockClientEncryption)(nil).GetKey), ctx, id)
}

// GetKeyByAltName mocks base method.
func (m *MockClientEncryption) GetKeyByAltName(ctx context.Context, keyAltName string) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByAltName", ctx, keyAltName)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// GetKeyByAltName indicates an expected call of GetKeyByAltName.
func (mr *MockClientEncryptionMockRecorder) GetKeyByAltName(ctx, keyAltName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByAltName", reflect.TypeOf((*MockClientEncryption)(nil).GetKeyByAltName), ctx, keyAltName)
}

// GetKeys mocks base method.
func (m *MockClientEncryption) GetKeys(ctx context.Context) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", ctx)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockClientEncryptionMockRecorder) GetKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockClientEncryption)(nil).GetKeys), ctx)
}

// RemoveKeyAltName mocks base method.
func (m *MockClientEncryption) RemoveKeyAltName(ctx context.Context, id bson.Binary, keyAltName string) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKeyAltName", ctx, id, keyAltName)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// RemoveKeyAltName indicates an expected call of RemoveKeyAltName.
func (mr *MockClientEncryptionMockRecorder) RemoveKeyAltName(ctx, id, keyAltName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKeyAltName", reflect.TypeOf((*MockClientEncryption)(nil).RemoveKeyAltName), ctx, id, keyAltName)
}

// RewrapManyDataKey mocks base method.
func (m *MockClientEncryption) RewrapManyDataKey(ctx context.Context, filter any, opts ...options.Lister[options.RewrapManyDataKeyOptions]) (*mongo.RewrapManyDataKeyResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RewrapManyDataKey", varargs...)
	ret0, _ := ret[0].(*mongo.RewrapManyDataKeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RewrapManyDataKey indicates an expected call of RewrapManyDataKey.
func (mr *MockClientEncryptionMockRecorder) RewrapManyDataKey(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewrapManyDataKey", reflect.TypeOf((*MockClientEncryption)(nil).RewrapManyDataKey), varargs...)
}

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
	isgomock struct{}
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockCollection) Aggregate(ctx context.Context, pipeline any, opts ...options.Lister[options.AggregateOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Aggregate", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockCollectionMockRecorder) Aggregate(ctx, pipeline any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockCollection)(nil).Aggregate), varargs...)
}

// BulkWrite mocks base method.
func (m *MockCollection) BulkWrite(ctx context.Context, models []mongo.WriteModel, opts ...options.Lister[options.BulkWriteOptions]) (*mongo.BulkWriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, models}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkWrite", varargs...)
	ret0, _ := ret[0].(*mongo.BulkWriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkWrite indicates an expected call of BulkWrite.
func (mr *MockCollectionMockRecorder) BulkWrite(ctx, models any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, models}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkWrite", reflect.TypeOf((*MockCollection)(nil).BulkWrite), varargs...)
}

// Clone mocks base method.
func (m *MockCollection) Clone(opts ...options.Lister[options.CollectionOptions]) mongoifc.Collection {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clone", varargs...)
	ret0, _ := ret[0].(mongoifc.Collection)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockCollectionMockRecorder) Clone(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCollection)(nil).Clone), opts...)
}

// CountDocuments mocks base method.
func (m *MockCollection) CountDocuments(ctx context.Context, filter any, opts ...options.Lister[options.CountOptions]) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountDocuments", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockCollectionMockRecorder) CountDocuments(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockCollection)(nil).CountDocuments), varargs...)
}

// Database mocks base method.
func (m *MockCollection) Database() mongoifc.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(mongoifc.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockCollectionMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockCollection)(nil).Database))
}

// DeleteMany mocks base method.
func (m *MockCollection) DeleteMany(ctx context.Context, filter any, opts ...options.Lister[options.DeleteManyOptions]) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMany", varargs...)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockCollectionMockRecorder) DeleteMany(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockCollection)(nil).DeleteMany), varargs...)
}

// DeleteOne mocks base method.
func (m *MockCollection) DeleteOne(ctx context.Context, filter any, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockCollectionMockRecorder) DeleteOne(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCollection)(nil).DeleteOne), varargs...)
}

// Distinct mocks base method.
func (m *MockCollection) Distinct(ctx context.Context, fieldName string, filter any, opts ...options.Lister[options.DistinctOptions]) mongoifc.DistinctResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fieldName, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(mongoifc.DistinctResult)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockCollectionMockRecorder) Distinct(ctx, fieldName, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fieldName, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockCollection)(nil).Distinct), varargs...)
}

// Drop mocks base method.
func (m *MockCollection) Drop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockCollectionMockRecorder) Drop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockCollection)(nil).Drop), ctx)
}

// EstimatedDocumentCount mocks base method.
func (m *MockCollection) EstimatedDocumentCount(ctx context.Context, opts ...options.Lister[options.EstimatedDocumentCountOptions]) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimatedDocumentCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimatedDocumentCount indicates an expected call of EstimatedDocumentCount.
func (mr *MockCollectionMockRecorder) EstimatedDocumentCount(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatedDocumentCount", reflect.TypeOf((*MockCollection)(nil).EstimatedDocumentCount), varargs...)
}

// Find mocks base method.
func (m *MockCollection) Find(ctx context.Context, filter any, opts ...options.Lister[options.FindOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCollectionMockRecorder) Find(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollection)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockCollection) FindOne(ctx context.Context, filter any, opts ...options.Lister[options.FindOneOptions]) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCollectionMockRecorder) FindOne(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCollection)(nil).FindOne), varargs...)
}

// FindOneAndDelete mocks base method.
func (m *MockCollection) FindOneAndDelete(ctx context.Context, filter any, opts ...options.Lister[options.FindOneAndDeleteOptions]) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAndDelete", varargs...)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// FindOneAndDelete indicates an expected call of FindOneAndDelete.
func (mr *MockCollectionMockRecorder) FindOneAndDelete(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndDelete", reflect.TypeOf((*MockCollection)(nil).FindOneAndDelete), varargs...)
}

// FindOneAndReplace mocks base method.
func (m *MockCollection) FindOneAndReplace(ctx context.Context, filter, replacement any, opts ...options.Lister[options.FindOneAndReplaceOptions]) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, replacement}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAndReplace", varargs...)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// FindOneAndReplace indicates an expected call of FindOneAndReplace.
func (mr *MockCollectionMockRecorder) FindOneAndReplace(ctx, filter, replacement any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, replacement}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndReplace", reflect.TypeOf((*MockCollection)(nil).FindOneAndReplace), varargs...)
}

// FindOneAndUpdate mocks base method.
func (m *MockCollection) FindOneAndUpdate(ctx context.Context, filter, update any, opts ...options.Lister[options.FindOneAndUpdateOptions]) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAndUpdate", varargs...)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate.
func (mr *MockCollectionMockRecorder) FindOneAndUpdate(ctx, filter, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockCollection)(nil).FindOneAndUpdate), varargs...)
}

// Indexes mocks base method.
func (m *MockCollection) Indexes() mongoifc.IndexView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].(mongoifc.IndexView)
	return ret0
}

// Indexes indicates an expected call of Indexes.
func (mr *MockCollectionMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockCollection)(nil).Indexes))
}

// InsertMany mocks base method.
func (m *MockCollection) InsertMany(ctx context.Context, documents []any, opts ...options.Lister[options.InsertManyOptions]) (*mongo.InsertManyResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, documents}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMany", varargs...)
	ret0, _ := ret[0].(*mongo.InsertManyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockCollectionMockRecorder) InsertMany(ctx, documents any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, documents}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockCollection)(nil).InsertMany), varargs...)
}

// InsertOne mocks base method.
func (m *MockCollection) InsertOne(ctx context.Context, document any, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockCollectionMockRecorder) InsertOne(ctx, document any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollection)(nil).InsertOne), varargs...)
}

// Name mocks base method.
func (m *MockCollection) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCollectionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCollection)(nil).Name))
}

// ReplaceOne mocks base method.
func (m *MockCollection) ReplaceOne(ctx context.Context, filter, replacement any, opts ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, replacement}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplaceOne", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceOne indicates an expected call of ReplaceOne.
func (mr *MockCollectionMockRecorder) ReplaceOne(ctx, filter, replacement any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, replacement}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOne", reflect.TypeOf((*MockCollection)(nil).ReplaceOne), varargs...)
}

// SearchIndexes mocks base method.
func (m *MockCollection) SearchIndexes() mongoifc.SearchIndexView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndexes")
	ret0, _ := ret[0].(mongoifc.SearchIndexView)
	return ret0
}

// SearchIndexes indicates an expected call of SearchIndexes.
func (mr *MockCollectionMockRecorder) SearchIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndexes", reflect.TypeOf((*MockCollection)(nil).SearchIndexes))
}

// UpdateByID mocks base method.
func (m *MockCollection) UpdateByID(ctx context.Context, id, update any, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateByID", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCollectionMockRecorder) UpdateByID(ctx, id, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCollection)(nil).UpdateByID), varargs...)
}

// UpdateMany mocks base method.
func (m *MockCollection) UpdateMany(ctx context.Context, filter, update any, opts ...options.Lister[options.UpdateManyOptions]) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMany", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockCollectionMockRecorder) UpdateMany(ctx, filter, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockCollection)(nil).UpdateMany), varargs...)
}

// UpdateOne mocks base method.
func (m *MockCollection) UpdateOne(ctx context.Context, filter, update any, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockCollectionMockRecorder) UpdateOne(ctx, filter, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCollection)(nil).UpdateOne), varargs...)
}

// Watch mocks base method.
func (m *MockCollection) Watch(ctx context.Context, pipeline any, opts ...options.Lister[options.ChangeStreamOptions]) (mongoifc.ChangeStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(mongoifc.ChangeStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockCollectionMockRecorder) Watch(ctx, pipeline any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCollection)(nil).Watch), varargs...)
}

// MockCursor is a mock of Cursor interface.
type MockCursor struct {
	ctrl     *gomock.Controller
	recorder *MockCursorMockRecorder
	isgomock struct{}
}

// MockCursorMockRecorder is the mock recorder for MockCursor.
type MockCursorMockRecorder struct {
	mock *MockCursor
}

// NewMockCursor creates a new mock instance.
func NewMockCursor(ctrl *gomock.Controller) *MockCursor {
	mock := &MockCursor{ctrl: ctrl}
	mock.recorder = &MockCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCursor) EXPECT() *MockCursorMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockCursor) All(ctx context.Context, results any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockCursorMockRecorder) All(ctx, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCursor)(nil).All), ctx, results)
}

// Close mocks base method.
func (m *MockCursor) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCursorMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCursor)(nil).Close), ctx)
}

// Current mocks base method.
func (m *MockCursor) Current() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockCursorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockCursor)(nil).Current))
}

// Decode mocks base method.
func (m *MockCursor) Decode(val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockCursorMockRecorder) Decode(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCursor)(nil).Decode), val)
}

// Err mocks base method.
func (m *MockCursor) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockCursorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCursor)(nil).Err))
}

// ID mocks base method.
func (m *MockCursor) ID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCursorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCursor)(nil).ID))
}

// Next mocks base method.
func (m *MockCursor) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockCursorMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCursor)(nil).Next), ctx)
}

// RemainingBatchLength mocks base method.
func (m *MockCursor) RemainingBatchLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemainingBatchLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// RemainingBatchLength indicates an expected call of RemainingBatchLength.
func (mr *MockCursorMockRecorder) RemainingBatchLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemainingBatchLength", reflect.TypeOf((*MockCursor)(nil).RemainingBatchLength))
}

// SetBatchSize mocks base method.
func (m *MockCursor) SetBatchSize(batchSize int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBatchSize", batchSize)
}

// SetBatchSize indicates an expected call of SetBatchSize.
func (mr *MockCursorMockRecorder) SetBatchSize(batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatchSize", reflect.TypeOf((*MockCursor)(nil).SetBatchSize), batchSize)
}

// SetComment mocks base method.
func (m *MockCursor) SetComment(comment any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComment", comment)
}

// SetComment indicates an expected call of SetComment.
func (mr *MockCursorMockRecorder) SetComment(comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComment", reflect.TypeOf((*MockCursor)(nil).SetComment), comment)
}

// SetMaxAwaitTime mocks base method.
func (m *MockCursor) SetMaxAwaitTime(dur time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxAwaitTime", dur)
}

// SetMaxAwaitTime indicates an expected call of SetMaxAwaitTime.
func (mr *MockCursorMockRecorder) SetMaxAwaitTime(dur any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxAwaitTime", reflect.TypeOf((*MockCursor)(nil).SetMaxAwaitTime), dur)
}

// TryNext mocks base method.
func (m *MockCursor) TryNext(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryNext", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryNext indicates an expected call of TryNext.
func (mr *MockCursorMockRecorder) TryNext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryNext", reflect.TypeOf((*MockCursor)(nil).TryNext), ctx)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockDatabase) Aggregate(ctx context.Context, pipeline any, opts ...options.Lister[options.AggregateOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Aggregate", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockDatabaseMockRecorder) Aggregate(ctx, pipeline any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockDatabase)(nil).Aggregate), varargs...)
}

// Client mocks base method.
func (m *MockDatabase) Client() mongoifc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(mongoifc.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockDatabaseMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDatabase)(nil).Client))
}

// Collection mocks base method.
func (m *MockDatabase) Collection(name string, opts ...options.Lister[options.CollectionOptions]) mongoifc.Collection {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(mongoifc.Collection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseMockRecorder) Collection(name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabase)(nil).Collection), varargs...)
}

// CreateCollection mocks base method.
func (m *MockDatabase) CreateCollection(ctx context.Context, name string, opts ...options.Lister[options.CreateCollectionOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollection", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockDatabaseMockRecorder) CreateCollection(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockDatabase)(nil).CreateCollection), varargs...)
}

// CreateView mocks base method.
func (m *MockDatabase) CreateView(ctx context.Context, viewName, viewOn string, pipeline any, opts ...options.Lister[options.CreateViewOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, viewName, viewOn, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateView", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateView indicates an expected call of CreateView.
func (mr *MockDatabaseMockRecorder) CreateView(ctx, viewName, viewOn, pipeline any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, viewName, viewOn, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockDatabase)(nil).CreateView), varargs...)
}

// Drop mocks base method.
func (m *MockDatabase) Drop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockDatabaseMockRecorder) Drop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockDatabase)(nil).Drop), ctx)
}

// GridFSBucket mocks base method.
func (m *MockDatabase) GridFSBucket(opts ...options.Lister[options.BucketOptions]) mongoifc.GridFSBucket {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GridFSBucket", varargs...)
	ret0, _ := ret[0].(mongoifc.GridFSBucket)
	return ret0
}

// GridFSBucket indicates an expected call of GridFSBucket.
func (mr *MockDatabaseMockRecorder) GridFSBucket(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GridFSBucket", reflect.TypeOf((*MockDatabase)(nil).GridFSBucket), opts...)
}

// ListCollectionNames mocks base method.
func (m *MockDatabase) ListCollectionNames(ctx context.Context, filter any, opts ...options.Lister[options.ListCollectionsOptions]) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionNames", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionNames indicates an expected call of ListCollectionNames.
func (mr *MockDatabaseMockRecorder) ListCollectionNames(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionNames", reflect.TypeOf((*MockDatabase)(nil).ListCollectionNames), varargs...)
}

// ListCollectionSpecifications mocks base method.
func (m *MockDatabase) ListCollectionSpecifications(ctx context.Context, filter any, opts ...options.Lister[options.ListCollectionsOptions]) ([]mongo.CollectionSpecification, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionSpecifications", varargs...)
	ret0, _ := ret[0].([]mongo.CollectionSpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionSpecifications indicates an expected call of ListCollectionSpecifications.
func (mr *MockDatabaseMockRecorder) ListCollectionSpecifications(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionSpecifications", reflect.TypeOf((*MockDatabase)(nil).ListCollectionSpecifications), varargs...)
}

// ListCollections mocks base method.
func (m *MockDatabase) ListCollections(ctx context.Context, filter any, opts ...options.Lister[options.ListCollectionsOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollections", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockDatabaseMockRecorder) ListCollections(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockDatabase)(nil).ListCollections), varargs...)
}

// Name mocks base method.
func (m *MockDatabase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDatabaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
}

// RunCommand mocks base method.
func (m *MockDatabase) RunCommand(ctx context.Context, runCommand any, opts ...options.Lister[options.RunCmdOptions]) mongoifc.SingleResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, runCommand}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommand", varargs...)
	ret0, _ := ret[0].(mongoifc.SingleResult)
	return ret0
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockDatabaseMockRecorder) RunCommand(ctx, runCommand any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, runCommand}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockDatabase)(nil).RunCommand), varargs...)
}

// RunCommandCursor mocks base method.
func (m *MockDatabase) RunCommandCursor(ctx context.Context, runCommand any, opts ...options.Lister[options.RunCmdOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, runCommand}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommandCursor", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommandCursor indicates an expected call of RunCommandCursor.
func (mr *MockDatabaseMockRecorder) RunCommandCursor(ctx, runCommand any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, runCommand}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandCursor", reflect.TypeOf((*MockDatabase)(nil).RunCommandCursor), varargs...)
}

// Watch mocks base method.
func (m *MockDatabase) Watch(ctx context.Context, pipeline any, opts ...options.Lister[options.ChangeStreamOptions]) (mongoifc.ChangeStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(mongoifc.ChangeStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockDatabaseMockRecorder) Watch(ctx, pipeline any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDatabase)(nil).Watch), varargs...)
}

// MockDistinctResult is a mock of DistinctResult interface.
type MockDistinctResult struct {
	ctrl     *gomock.Controller
	recorder *MockDistinctResultMockRecorder
	isgomock struct{}
}

// MockDistinctResultMockRecorder is the mock recorder for MockDistinctResult.
type MockDistinctResultMockRecorder struct {
	mock *MockDistinctResult
}

// NewMockDistinctResult creates a new mock instance.
func NewMockDistinctResult(ctrl *gomock.Controller) *MockDistinctResult {
	mock := &MockDistinctResult{ctrl: ctrl}
	mock.recorder = &MockDistinctResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistinctResult) EXPECT() *MockDistinctResultMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDistinctResult) Decode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockDistinctResultMockRecorder) Decode(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDistinctResult)(nil).Decode), v)
}

// Err mocks base method.
func (m *MockDistinctResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockDistinctResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockDistinctResult)(nil).Err))
}

// Raw mocks base method.
func (m *MockDistinctResult) Raw() (bson.RawArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(bson.RawArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockDistinctResultMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockDistinctResult)(nil).Raw))
}

// MockGridFSBucket is a mock of GridFSBucket interface.
type MockGridFSBucket struct {
	ctrl     *gomock.Controller
	recorder *MockGridFSBucketMockRecorder
	isgomock struct{}
}

// MockGridFSBucketMockRecorder is the mock recorder for MockGridFSBucket.
type MockGridFSBucketMockRecorder struct {
	mock *MockGridFSBucket
}

// NewMockGridFSBucket creates a new mock instance.
func NewMockGridFSBucket(ctrl *gomock.Controller) *MockGridFSBucket {
	mock := &MockGridFSBucket{ctrl: ctrl}
	mock.recorder = &MockGridFSBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGridFSBucket) EXPECT() *MockGridFSBucketMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGridFSBucket) Delete(ctx context.Context, fileID any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGridFSBucketMockRecorder) Delete(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGridFSBucket)(nil).Delete), ctx, fileID)
}

// DownloadToStream mocks base method.
func (m *MockGridFSBucket) DownloadToStream(ctx context.Context, fileID any, stream io.Writer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadToStream", ctx, fileID, stream)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadToStream indicates an expected call of DownloadToStream.
func (mr *MockGridFSBucketMockRecorder) DownloadToStream(ctx, fileID, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadToStream", reflect.TypeOf((*MockGridFSBucket)(nil).DownloadToStream), ctx, fileID, stream)
}

// DownloadToStreamByName mocks base method.
func (m *MockGridFSBucket) DownloadToStreamByName(ctx context.Context, filename string, stream io.Writer, opts ...options.Lister[options.GridFSNameOptions]) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filename, stream}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadToStreamByName", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadToStreamByName indicates an expected call of DownloadToStreamByName.
func (mr *MockGridFSBucketMockRecorder) DownloadToStreamByName(ctx, filename, stream any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filename, stream}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadToStreamByName", reflect.TypeOf((*MockGridFSBucket)(nil).DownloadToStreamByName), varargs...)
}

// Drop mocks base method.
func (m *MockGridFSBucket) Drop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockGridFSBucketMockRecorder) Drop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockGridFSBucket)(nil).Drop), ctx)
}

// Find mocks base method.
func (m *MockGridFSBucket) Find(ctx context.Context, filter any, opts ...options.Lister[options.GridFSFindOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGridFSBucketMockRecorder) Find(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGridFSBucket)(nil).Find), varargs...)
}

// GetChunksCollection mocks base method.
func (m *MockGridFSBucket) GetChunksCollection() mongoifc.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunksCollection")
	ret0, _ := ret[0].(mongoifc.Collection)
	return ret0
}

// GetChunksCollection indicates an expected call of GetChunksCollection.
func (mr *MockGridFSBucketMockRecorder) GetChunksCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksCollection", reflect.TypeOf((*MockGridFSBucket)(nil).GetChunksCollection))
}

// GetFilesCollection mocks base method.
func (m *MockGridFSBucket) GetFilesCollection() mongoifc.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesCollection")
	ret0, _ := ret[0].(mongoifc.Collection)
	return ret0
}

// GetFilesCollection indicates an expected call of GetFilesCollection.
func (mr *MockGridFSBucketMockRecorder) GetFilesCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesCollection", reflect.TypeOf((*MockGridFSBucket)(nil).GetFilesCollection))
}

// OpenDownloadStream mocks base method.
func (m *MockGridFSBucket) OpenDownloadStream(ctx context.Context, fileID any) (mongoifc.GridFSDownloadStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDownloadStream", ctx, fileID)
	ret0, _ := ret[0].(mongoifc.GridFSDownloadStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDownloadStream indicates an expected call of OpenDownloadStream.
func (mr *MockGridFSBucketMockRecorder) OpenDownloadStream(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDownloadStream", reflect.TypeOf((*MockGridFSBucket)(nil).OpenDownloadStream), ctx, fileID)
}

// OpenDownloadStreamByName mocks base method.
func (m *MockGridFSBucket) OpenDownloadStreamByName(ctx context.Context, filename string, opts ...options.Lister[options.GridFSNameOptions]) (mongoifc.GridFSDownloadStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filename}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenDownloadStreamByName", varargs...)
	ret0, _ := ret[0].(mongoifc.GridFSDownloadStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDownloadStreamByName indicates an expected call of OpenDownloadStreamByName.
func (mr *MockGridFSBucketMockRecorder) OpenDownloadStreamByName(ctx, filename any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filename}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDownloadStreamByName", reflect.TypeOf((*MockGridFSBucket)(nil).OpenDownloadStreamByName), varargs...)
}

// OpenUploadStream mocks base method.
func (m *MockGridFSBucket) OpenUploadStream(ctx context.Context, filename string, opts ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filename}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenUploadStream", varargs...)
	ret0, _ := ret[0].(mongoifc.GridFSUploadStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenUploadStream indicates an expected call of OpenUploadStream.
func (mr *MockGridFSBucketMockRecorder) OpenUploadStream(ctx, filename any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filename}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenUploadStream", reflect.TypeOf((*MockGridFSBucket)(nil).OpenUploadStream), varargs...)
}

// OpenUploadStreamWithID mocks base method.
func (m *MockGridFSBucket) OpenUploadStreamWithID(ctx context.Context, fileID any, filename string, opts ...options.Lister[options.GridFSUploadOptions]) (mongoifc.GridFSUploadStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fileID, filename}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenUploadStreamWithID", varargs...)
	ret0, _ := ret[0].(mongoifc.GridFSUploadStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenUploadStreamWithID indicates an expected call of OpenUploadStreamWithID.
func (mr *MockGridFSBucketMockRecorder) OpenUploadStreamWithID(ctx, fileID, filename any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fileID, filename}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenUploadStreamWithID", reflect.TypeOf((*MockGridFSBucket)(nil).OpenUploadStreamWithID), varargs...)
}

// Rename mocks base method.
func (m *MockGridFSBucket) Rename(ctx context.Context, fileID any, newFilename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, fileID, newFilename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockGridFSBucketMockRecorder) Rename(ctx, fileID, newFilename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockGridFSBucket)(nil).Rename), ctx, fileID, newFilename)
}

// UploadFromStream mocks base method.
func (m *MockGridFSBucket) UploadFromStream(ctx context.Context, filename string, source io.Reader, opts ...options.Lister[options.GridFSUploadOptions]) (bson.ObjectID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filename, source}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFromStream", varargs...)
	ret0, _ := ret[0].(bson.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFromStream indicates an expected call of UploadFromStream.
func (mr *MockGridFSBucketMockRecorder) UploadFromStream(ctx, filename, source any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filename, source}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFromStream", reflect.TypeOf((*MockGridFSBucket)(nil).UploadFromStream), varargs...)
}

// UploadFromStreamWithID mocks base method.
func (m *MockGridFSBucket) UploadFromStreamWithID(ctx context.Context, fileID any, filename string, source io.Reader, opts ...options.Lister[options.GridFSUploadOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fileID, filename, source}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFromStreamWithID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFromStreamWithID indicates an expected call of UploadFromStreamWithID.
func (mr *MockGridFSBucketMockRecorder) UploadFromStreamWithID(ctx, fileID, filename, source any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fileID, filename, source}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFromStreamWithID", reflect.TypeOf((*MockGridFSBucket)(nil).UploadFromStreamWithID), varargs...)
}

// MockGridFSDownloadStream is a mock of GridFSDownloadStream interface.
type MockGridFSDownloadStream struct {
	ctrl     *gomock.Controller
	recorder *MockGridFSDownloadStreamMockRecorder
	isgomock struct{}
}

// MockGridFSDownloadStreamMockRecorder is the mock recorder for MockGridFSDownloadStream.
type MockGridFSDownloadStreamMockRecorder struct {
	mock *MockGridFSDownloadStream
}

// NewMockGridFSDownloadStream creates a new mock instance.
func NewMockGridFSDownloadStream(ctrl *gomock.Controller) *MockGridFSDownloadStream {
	mock := &MockGridFSDownloadStream{ctrl: ctrl}
	mock.recorder = &MockGridFSDownloadStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGridFSDownloadStream) EXPECT() *MockGridFSDownloadStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGridFSDownloadStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGridFSDownloadStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGridFSDownloadStream)(nil).Close))
}

// GetFile mocks base method.
func (m *MockGridFSDownloadStream) GetFile() *mongo.GridFSFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile")
	ret0, _ := ret[0].(*mongo.GridFSFile)
	return ret0
}

// GetFile indicates an expected call of GetFile.
func (mr *MockGridFSDownloadStreamMockRecorder) GetFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockGridFSDownloadStream)(nil).GetFile))
}

// Read mocks base method.
func (m *MockGridFSDownloadStream) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGridFSDownloadStreamMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGridFSDownloadStream)(nil).Read), p)
}

// Skip mocks base method.
func (m *MockGridFSDownloadStream) Skip(skip int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", skip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Skip indicates an expected call of Skip.
func (mr *MockGridFSDownloadStreamMockRecorder) Skip(skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockGridFSDownloadStream)(nil).Skip), skip)
}

// MockGridFSUploadStream is a mock of GridFSUploadStream interface.
type MockGridFSUploadStream struct {
	ctrl     *gomock.Controller
	recorder *MockGridFSUploadStreamMockRecorder
	isgomock struct{}
}

// MockGridFSUploadStreamMockRecorder is the mock recorder for MockGridFSUploadStream.
type MockGridFSUploadStreamMockRecorder struct {
	mock *MockGridFSUploadStream
}

// NewMockGridFSUploadStream creates a new mock instance.
func NewMockGridFSUploadStream(ctrl *gomock.Controller) *MockGridFSUploadStream {
	mock := &MockGridFSUploadStream{ctrl: ctrl}
	mock.recorder = &MockGridFSUploadStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGridFSUploadStream) EXPECT() *MockGridFSUploadStreamMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockGridFSUploadStream) Abort() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockGridFSUploadStreamMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockGridFSUploadStream)(nil).Abort))
}

// Close mocks base method.
func (m *MockGridFSUploadStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGridFSUploadStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGridFSUploadStream)(nil).Close))
}

// GetFileID mocks base method.
func (m *MockGridFSUploadStream) GetFileID() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileID")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetFileID indicates an expected call of GetFileID.
func (mr *MockGridFSUploadStreamMockRecorder) GetFileID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileID", reflect.TypeOf((*MockGridFSUploadStream)(nil).GetFileID))
}

// SetFileID mocks base method.
func (m *MockGridFSUploadStream) SetFileID(fileID any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFileID", fileID)
}

// SetFileID indicates an expected call of SetFileID.
func (mr *MockGridFSUploadStreamMockRecorder) SetFileID(fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileID", reflect.TypeOf((*MockGridFSUploadStream)(nil).SetFileID), fileID)
}

// Write mocks base method.
func (m *MockGridFSUploadStream) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockGridFSUploadStreamMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockGridFSUploadStream)(nil).Write), p)
}

// MockIndexView is a mock of IndexView interface.
type MockIndexView struct {
	ctrl     *gomock.Controller
	recorder *MockIndexViewMockRecorder
	isgomock struct{}
}

// MockIndexViewMockRecorder is the mock recorder for MockIndexView.
type MockIndexViewMockRecorder struct {
	mock *MockIndexView
}

// NewMockIndexView creates a new mock instance.
func NewMockIndexView(ctrl *gomock.Controller) *MockIndexView {
	mock := &MockIndexView{ctrl: ctrl}
	mock.recorder = &MockIndexViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexView) EXPECT() *MockIndexViewMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockIndexView) CreateMany(ctx context.Context, models []mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions]) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, models}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMany", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockIndexViewMockRecorder) CreateMany(ctx, models any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, models}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockIndexView)(nil).CreateMany), varargs...)
}

// CreateOne mocks base method.
func (m *MockIndexView) CreateOne(ctx context.Context, model mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions]) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, model}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOne", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockIndexViewMockRecorder) CreateOne(ctx, model any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, model}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockIndexView)(nil).CreateOne), varargs...)
}

// DropAll mocks base method.
func (m *MockIndexView) DropAll(ctx context.Context, opts ...options.Lister[options.DropIndexesOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAll indicates an expected call of DropAll.
func (mr *MockIndexViewMockRecorder) DropAll(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAll", reflect.TypeOf((*MockIndexView)(nil).DropAll), varargs...)
}

// DropOne mocks base method.
func (m *MockIndexView) DropOne(ctx context.Context, name string, opts ...options.Lister[options.DropIndexesOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropOne indicates an expected call of DropOne.
func (mr *MockIndexViewMockRecorder) DropOne(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropOne", reflect.TypeOf((*MockIndexView)(nil).DropOne), varargs...)
}

// DropWithKey mocks base method.
func (m *MockIndexView) DropWithKey(ctx context.Context, keySpecDocument any, opts ...options.Lister[options.DropIndexesOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keySpecDocument}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropWithKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropWithKey indicates an expected call of DropWithKey.
func (mr *MockIndexViewMockRecorder) DropWithKey(ctx, keySpecDocument any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keySpecDocument}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropWithKey", reflect.TypeOf((*MockIndexView)(nil).DropWithKey), varargs...)
}

// List mocks base method.
func (m *MockIndexView) List(ctx context.Context, opts ...options.Lister[options.ListIndexesOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIndexViewMockRecorder) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIndexView)(nil).List), varargs...)
}

// ListSpecifications mocks base method.
func (m *MockIndexView) ListSpecifications(ctx context.Context, opts ...options.Lister[options.ListIndexesOptions]) ([]mongo.IndexSpecification, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpecifications", varargs...)
	ret0, _ := ret[0].([]mongo.IndexSpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpecifications indicates an expected call of ListSpecifications.
func (mr *MockIndexViewMockRecorder) ListSpecifications(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpecifications", reflect.TypeOf((*MockIndexView)(nil).ListSpecifications), varargs...)
}

// MockSearchIndexView is a mock of SearchIndexView interface.
type MockSearchIndexView struct {
	ctrl     *gomock.Controller
	recorder *MockSearchIndexViewMockRecorder
	isgomock struct{}
}

// MockSearchIndexViewMockRecorder is the mock recorder for MockSearchIndexView.
type MockSearchIndexViewMockRecorder struct {
	mock *MockSearchIndexView
}

// NewMockSearchIndexView creates a new mock instance.
func NewMockSearchIndexView(ctrl *gomock.Controller) *MockSearchIndexView {
	mock := &MockSearchIndexView{ctrl: ctrl}
	mock.recorder = &MockSearchIndexViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchIndexView) EXPECT() *MockSearchIndexViewMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockSearchIndexView) CreateMany(ctx context.Context, models []mongo.SearchIndexModel, opts ...options.Lister[options.CreateSearchIndexesOptions]) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, models}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMany", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockSearchIndexViewMockRecorder) CreateMany(ctx, models any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, models}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockSearchIndexView)(nil).CreateMany), varargs...)
}

// CreateOne mocks base method.
func (m *MockSearchIndexView) CreateOne(ctx context.Context, model mongo.SearchIndexModel, opts ...options.Lister[options.CreateSearchIndexesOptions]) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, model}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOne", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockSearchIndexViewMockRecorder) CreateOne(ctx, model any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, model}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockSearchIndexView)(nil).CreateOne), varargs...)
}

// DropOne mocks base method.
func (m *MockSearchIndexView) DropOne(ctx context.Context, name string, opts ...options.Lister[options.DropSearchIndexOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropOne indicates an expected call of DropOne.
func (mr *MockSearchIndexViewMockRecorder) DropOne(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropOne", reflect.TypeOf((*MockSearchIndexView)(nil).DropOne), varargs...)
}

// List mocks base method.
func (m *MockSearchIndexView) List(ctx context.Context, searchIdxOpts options.Lister[options.SearchIndexesOptions], opts ...options.Lister[options.ListSearchIndexesOptions]) (mongoifc.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, searchIdxOpts}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(mongoifc.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSearchIndexViewMockRecorder) List(ctx, searchIdxOpts any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, searchIdxOpts}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSearchIndexView)(nil).List), varargs...)
}

// UpdateOne mocks base method.
func (m *MockSearchIndexView) UpdateOne(ctx context.Context, name string, definition any, opts ...options.Lister[options.UpdateSearchIndexOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, definition}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockSearchIndexViewMockRecorder) UpdateOne(ctx, name, definition any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, definition}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockSearchIndexView)(nil).UpdateOne), varargs...)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
	isgomock struct{}
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockSession) AbortTransaction(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTransaction", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockSessionMockRecorder) AbortTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockSession)(nil).AbortTransaction), ctx)
}

// AdvanceClusterTime mocks base method.
func (m *MockSession) AdvanceClusterTime(d bson.Raw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceClusterTime", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceClusterTime indicates an expected call of AdvanceClusterTime.
func (mr *MockSessionMockRecorder) AdvanceClusterTime(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceClusterTime", reflect.TypeOf((*MockSession)(nil).AdvanceClusterTime), d)
}

// AdvanceOperationTime mocks base method.
func (m *MockSession) AdvanceOperationTime(ts *bson.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceOperationTime", ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceOperationTime indicates an expected call of AdvanceOperationTime.
func (mr *MockSessionMockRecorder) AdvanceOperationTime(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceOperationTime", reflect.TypeOf((*MockSession)(nil).AdvanceOperationTime), ts)
}

// Client mocks base method.
func (m *MockSession) Client() mongoifc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(mongoifc.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockSessionMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSession)(nil).Client))
}

// ClusterTime mocks base method.
func (m *MockSession) ClusterTime() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterTime")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// ClusterTime indicates an expected call of ClusterTime.
func (mr *MockSessionMockRecorder) ClusterTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterTime", reflect.TypeOf((*MockSession)(nil).ClusterTime))
}

// CommitTransaction mocks base method.
func (m *MockSession) CommitTransaction(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockSessionMockRecorder) CommitTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockSession)(nil).CommitTransaction), ctx)
}

// EndSession mocks base method.
func (m *MockSession) EndSession(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSession", ctx)
}

// EndSession indicates an expected call of EndSession.
func (mr *MockSessionMockRecorder) EndSession(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockSession)(nil).EndSession), ctx)
}

// ID mocks base method.
func (m *MockSession) ID() bson.Raw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(bson.Raw)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSession)(nil).ID))
}

// OperationTime mocks base method.
func (m *MockSession) OperationTime() *bson.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationTime")
	ret0, _ := ret[0].(*bson.Timestamp)
	return ret0
}

// OperationTime indicates an expected call of OperationTime.
func (mr *MockSessionMockRecorder) OperationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationTime", reflect.TypeOf((*MockSession)(nil).OperationTime))
}

// StartTransaction mocks base method.
func (m *MockSession) StartTransaction(opts ...options.Lister[options.TransactionOptions]) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockSessionMockRecorder) StartTransaction(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockSession)(nil).StartTransaction), opts...)
}

// WithTransaction mocks base method.
func (m *MockSession) WithTransaction(ctx context.Context, fn func(context.Context) (any, error), opts ...options.Lister[options.TransactionOptions]) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithTransaction", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockSessionMockRecorder) WithTransaction(ctx, fn any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockSession)(nil).WithTransaction), varargs...)
}

// MockSingleResult is a mock of SingleResult interface.
type MockSingleResult struct {
	ctrl     *gomock.Controller
	recorder *MockSingleResultMockRecorder
	isgomock struct{}
}

// MockSingleResultMockRecorder is the mock recorder for MockSingleResult.
type MockSingleResultMockRecorder struct {
	mock *MockSingleResult
}

// NewMockSingleResult creates a new mock instance.
func NewMockSingleResult(ctrl *gomock.Controller) *MockSingleResult {
	mock := &MockSingleResult{ctrl: ctrl}
	mock.recorder = &MockSingleResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleResult) EXPECT() *MockSingleResultMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockSingleResult) Decode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockSingleResultMockRecorder) Decode(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSingleResult)(nil).Decode), v)
}

// Err mocks base method.
func (m *MockSingleResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSingleResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSingleResult)(nil).Err))
}

// Raw mocks base method.
func (m *MockSingleResult) Raw() (bson.Raw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(bson.Raw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockSingleResultMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockSingleResult)(nil).Raw))
}
